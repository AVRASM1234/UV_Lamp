
Software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000137c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  0000137c  00001430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  008000e2  008000e2  000014b2  2**0
                  ALLOC
  3 .eeprom       00000012  00810000  00810000  000014b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001a0  00000000  00000000  00001530  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001eb2  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b14  00000000  00000000  00003582  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d3  00000000  00000000  00004096  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000045c  00000000  00000000  0000526c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000064a  00000000  00000000  000056c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000108a  00000000  00000000  00005d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  00006d9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	00 c2       	rjmp	.+1024   	; 0x402 <__ctors_end>
       2:	1a c2       	rjmp	.+1076   	; 0x438 <__bad_interrupt>
       4:	19 c2       	rjmp	.+1074   	; 0x438 <__bad_interrupt>
       6:	18 c2       	rjmp	.+1072   	; 0x438 <__bad_interrupt>
       8:	17 c2       	rjmp	.+1070   	; 0x438 <__bad_interrupt>
       a:	16 c2       	rjmp	.+1068   	; 0x438 <__bad_interrupt>
       c:	15 c2       	rjmp	.+1066   	; 0x438 <__bad_interrupt>
       e:	14 c2       	rjmp	.+1064   	; 0x438 <__bad_interrupt>
      10:	13 c2       	rjmp	.+1062   	; 0x438 <__bad_interrupt>
      12:	0d c5       	rjmp	.+2586   	; 0xa2e <__vector_9>
      14:	11 c2       	rjmp	.+1058   	; 0x438 <__bad_interrupt>
      16:	10 c2       	rjmp	.+1056   	; 0x438 <__bad_interrupt>
      18:	0f c2       	rjmp	.+1054   	; 0x438 <__bad_interrupt>
      1a:	0e c2       	rjmp	.+1052   	; 0x438 <__bad_interrupt>
      1c:	0d c2       	rjmp	.+1050   	; 0x438 <__bad_interrupt>
      1e:	0c c2       	rjmp	.+1048   	; 0x438 <__bad_interrupt>
      20:	0b c2       	rjmp	.+1046   	; 0x438 <__bad_interrupt>
      22:	0a c2       	rjmp	.+1044   	; 0x438 <__bad_interrupt>
      24:	09 c2       	rjmp	.+1042   	; 0x438 <__bad_interrupt>

00000026 <LargeNum>:
	...
      36:	00 00 00 30 30 00 00 00 00 00 00 03 03 00 00 00     ...00...........
      46:	00 fc 03 c3 c3 33 fc 00 00 0f 33 30 30 30 0f 00     .....3....3000..
      56:	00 00 00 0c ff 00 00 00 00 00 00 30 3f 30 00 00     ...........0?0..
      66:	00 0c 03 c3 c3 c3 3c 00 00 3c 33 30 30 30 30 00     ......<..<30000.
      76:	00 03 03 c3 c3 f3 0f 00 00 0c 30 30 30 30 0f 00     ..........0000..
      86:	00 00 c0 30 0c ff 00 00 00 03 03 03 03 3f 03 00     ...0.........?..
      96:	00 3f 33 33 33 33 c3 00 00 0c 30 30 30 30 0f 00     .?3333....0000..
      a6:	00 f0 cc c3 c3 c3 03 00 00 0f 30 30 30 30 0f 00     ..........0000..
      b6:	00 03 03 03 c3 33 0f 00 00 00 00 3f 00 00 00 00     .....3.....?....
      c6:	00 3c c3 c3 c3 c3 3c 00 00 0f 30 30 30 30 0f 00     .<....<...0000..
      d6:	00 3c c3 c3 c3 c3 fc 00 00 30 30 30 30 0c 03 00     .<.......0000...

000000e6 <SmallFont>:
      e6:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      f6:	7f 14 7f 14 24 2a 7f 2a 12 62 64 08 13 23 36 49     ....$*.*.bd..#6I
     106:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     116:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 a0 60     ....>....>.....`
     126:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     136:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     146:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     156:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     166:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     176:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     186:	32 49 59 51 3e 7c 12 11 12 7c 7f 49 49 49 36 3e     2IYQ>|...|.III6>
     196:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     1a6:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     1b6:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     1c6:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1d6:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1e6:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1f6:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     206:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     216:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     226:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     236:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     246:	09 01 02 18 a4 a4 a4 7c 7f 08 04 04 78 00 44 7d     .......|....x.D}
     256:	40 00 40 80 84 7d 00 7f 10 28 44 00 00 41 7f 40     @.@..}...(D..A.@
     266:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     276:	fc 24 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     .$$$..$$..|....H
     286:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     296:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 1c a0 a0     @ .<@0@<D(.(D...
     2a6:	a0 7c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     .|DdTLD..6A.....
     2b6:	00 00 41 36 08 00 08 04 08 10 08 7e 11 11 11 7e     ..A6.......~...~
     2c6:	7f 49 49 49 31 7f 49 49 49 36 7f 01 01 01 01 c0     .III1.III6......
     2d6:	7f 41 7f c0 7f 49 49 49 41 73 0c 7f 0c 73 41 49     .A...IIIAs...sAI
     2e6:	49 36 00 7f 10 0c 02 7f 7f 20 19 04 7f 7f 08 14     I6....... ......
     2f6:	22 41 40 3e 01 01 7f 7f 02 0c 02 7f 7f 08 08 08     "A@>............
     306:	7f 3e 41 41 41 3e 7f 01 01 01 7f 7f 09 09 09 06     .>AAA>..........
     316:	3e 41 41 41 22 01 01 7f 01 01 43 4c 30 0c 03 0e     >AAA".....CL0...
     326:	11 7f 11 0e 63 14 08 14 63 7f 40 40 7f c0 07 08     ....c...c.@@....
     336:	08 7f 00 7f 40 7f 40 7f 7f 40 7f 40 ff 01 7f 48     ....@.@..@.@...H
     346:	48 30 7f 48 30 00 7f 7f 48 48 30 00 49 49 49 3e     H0.H0...HH0.III>
     356:	00 7f 08 3e 41 3e 46 29 19 09 7f 20 54 54 54 78     ...>A>F)... TTTx
     366:	3c 4a 4b 49 30 7c 54 54 28 00 7c 04 04 04 00 c0     <JKI0|TT(.|.....
     376:	7c 44 7c c0 38 54 54 54 18 44 28 7c 28 44 44 54     |D|.8TTT.D(|(DDT
     386:	54 28 00 7c 20 10 08 7c 7c 20 12 08 7c 7c 10 28     T(.| ..|| ..||.(
     396:	44 00 40 3c 04 04 7c 7c 08 10 08 7c 7c 10 10 7c     D.@<..||...||..|
     3a6:	00 38 44 44 44 38 7c 04 04 7c 00 7c 14 14 14 08     .8DDD8|..|.|....
     3b6:	38 44 44 44 20 04 04 7c 04 04 84 98 60 18 04 18     8DDD ..|....`...
     3c6:	24 fc 24 18 44 28 10 28 44 7c 40 40 7c c0 0c 10     $.$.D(.(D|@@|...
     3d6:	10 7c 00 7c 40 7c 40 7c 7c 40 7c 40 fc 04 7c 50     .|.|@|@||@|@..|P
     3e6:	50 20 7c 50 70 00 7c 7c 50 50 20 00 54 54 54 38     P |Pp.||PP .TTT8
     3f6:	00 7c 10 38 44 38 48 34 14 7c 00 00                 .|.8D8H4.|..

00000402 <__ctors_end>:
     402:	11 24       	eor	r1, r1
     404:	1f be       	out	0x3f, r1	; 63
     406:	cf e5       	ldi	r28, 0x5F	; 95
     408:	d4 e0       	ldi	r29, 0x04	; 4
     40a:	de bf       	out	0x3e, r29	; 62
     40c:	cd bf       	out	0x3d, r28	; 61

0000040e <__do_copy_data>:
     40e:	10 e0       	ldi	r17, 0x00	; 0
     410:	a0 e6       	ldi	r26, 0x60	; 96
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	ec e7       	ldi	r30, 0x7C	; 124
     416:	f3 e1       	ldi	r31, 0x13	; 19
     418:	02 c0       	rjmp	.+4      	; 0x41e <__do_copy_data+0x10>
     41a:	05 90       	lpm	r0, Z+
     41c:	0d 92       	st	X+, r0
     41e:	a2 3e       	cpi	r26, 0xE2	; 226
     420:	b1 07       	cpc	r27, r17
     422:	d9 f7       	brne	.-10     	; 0x41a <__do_copy_data+0xc>

00000424 <__do_clear_bss>:
     424:	21 e0       	ldi	r18, 0x01	; 1
     426:	a2 ee       	ldi	r26, 0xE2	; 226
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	01 c0       	rjmp	.+2      	; 0x42e <.do_clear_bss_start>

0000042c <.do_clear_bss_loop>:
     42c:	1d 92       	st	X+, r1

0000042e <.do_clear_bss_start>:
     42e:	a6 35       	cpi	r26, 0x56	; 86
     430:	b2 07       	cpc	r27, r18
     432:	e1 f7       	brne	.-8      	; 0x42c <.do_clear_bss_loop>
     434:	cc d4       	rcall	.+2456   	; 0xdce <main>
     436:	a0 c7       	rjmp	.+3904   	; 0x1378 <_exit>

00000438 <__bad_interrupt>:
     438:	e3 cd       	rjmp	.-1082   	; 0x0 <__vectors>

0000043a <LCD5110_SendByte>:
//***************************************************************************
void LCD5110_SendByte(unsigned char data, unsigned char command)
{
	unsigned char i;		
	
	__LCD5110_Port &= ~(1<<__LCD5110_CE);				// Активируем контроллер дисплея
     43a:	93 98       	cbi	0x12, 3	; 18
	
	if (command == 0)									// Если отправляем комманду,...
     43c:	61 11       	cpse	r22, r1
     43e:	02 c0       	rjmp	.+4      	; 0x444 <LCD5110_SendByte+0xa>
		__LCD5110_Port &= ~(1<<__LCD5110_DC);			// ...то сбрасываем вывод комманда/данные
     440:	92 98       	cbi	0x12, 2	; 18
     442:	0e c0       	rjmp	.+28     	; 0x460 <__stack+0x1>
	else
		__LCD5110_Port |= (1<<__LCD5110_DC);			// Иначе устанавливаем, показывая то, что мы передаем данные
     444:	92 9a       	sbi	0x12, 2	; 18
     446:	0c c0       	rjmp	.+24     	; 0x460 <__stack+0x1>

	for(i = 0; i < 8; i++)								// По очереди проталкиваем байт. Бит за битом
	{
		if(data & 0x80)
     448:	88 23       	and	r24, r24
     44a:	14 f4       	brge	.+4      	; 0x450 <LCD5110_SendByte+0x16>
			__LCD5110_Port |= (1<<__LCD5110_DIN);
     44c:	91 9a       	sbi	0x12, 1	; 18
     44e:	01 c0       	rjmp	.+2      	; 0x452 <LCD5110_SendByte+0x18>
		else
			__LCD5110_Port &= ~(1<<__LCD5110_DIN);
     450:	91 98       	cbi	0x12, 1	; 18
		
		__LCD5110_Port &= ~(1<<__LCD5110_CLK);
     452:	90 98       	cbi	0x12, 0	; 18
		data = data << 1;
     454:	88 0f       	add	r24, r24
		__LCD5110_Port |= (1<<__LCD5110_CLK);
     456:	90 9a       	sbi	0x12, 0	; 18
     458:	91 50       	subi	r25, 0x01	; 1
	if (command == 0)									// Если отправляем комманду,...
		__LCD5110_Port &= ~(1<<__LCD5110_DC);			// ...то сбрасываем вывод комманда/данные
	else
		__LCD5110_Port |= (1<<__LCD5110_DC);			// Иначе устанавливаем, показывая то, что мы передаем данные

	for(i = 0; i < 8; i++)								// По очереди проталкиваем байт. Бит за битом
     45a:	b1 f7       	brne	.-20     	; 0x448 <LCD5110_SendByte+0xe>
		
		__LCD5110_Port &= ~(1<<__LCD5110_CLK);
		data = data << 1;
		__LCD5110_Port |= (1<<__LCD5110_CLK);
	}
	__LCD5110_Port |= (1<<__LCD5110_CE);				// В конце отключаем контроллер от шины
     45c:	93 9a       	sbi	0x12, 3	; 18
     45e:	08 95       	ret

//***************************************************************************
// Отправка байта на дисплей
//***************************************************************************
void LCD5110_SendByte(unsigned char data, unsigned char command)
{
     460:	98 e0       	ldi	r25, 0x08	; 8
     462:	f2 cf       	rjmp	.-28     	; 0x448 <LCD5110_SendByte+0xe>

00000464 <LCD5110_Clear>:

//***************************************************************************
// Очистка дисплея
//***************************************************************************
void LCD5110_Clear(void)
{
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
	unsigned int i;

	LCD5110_SendByte(0x40, 0);							// Переходим в первую строку							
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	80 e4       	ldi	r24, 0x40	; 64
     46c:	e6 df       	rcall	.-52     	; 0x43a <LCD5110_SendByte>
	LCD5110_SendByte(0x80, 0);							// В первый столбец
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	80 e8       	ldi	r24, 0x80	; 128
     472:	e3 df       	rcall	.-58     	; 0x43a <LCD5110_SendByte>
     474:	c8 ef       	ldi	r28, 0xF8	; 248
     476:	d1 e0       	ldi	r29, 0x01	; 1

	for (i=0; i<504; i++)
		LCD5110_SendByte(0, 1);							// И пхаем все это дело внутрь
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	de df       	rcall	.-68     	; 0x43a <LCD5110_SendByte>
     47e:	21 97       	sbiw	r28, 0x01	; 1
	unsigned int i;

	LCD5110_SendByte(0x40, 0);							// Переходим в первую строку							
	LCD5110_SendByte(0x80, 0);							// В первый столбец

	for (i=0; i<504; i++)
     480:	d9 f7       	brne	.-10     	; 0x478 <LCD5110_Clear+0x14>
		LCD5110_SendByte(0, 1);							// И пхаем все это дело внутрь
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <LCD5110_Init>:
//***************************************************************************
// Инициализация дисплея
//***************************************************************************
void LCD5110_Init(void)
{
	__LCD5110_DDR |= (1<<__LCD5110_R)|(1<<__LCD5110_CE)|(1<<__LCD5110_DC)|(1<<__LCD5110_DIN)|(1<<__LCD5110_CLK);
     488:	81 b3       	in	r24, 0x11	; 17
     48a:	8f 61       	ori	r24, 0x1F	; 31
     48c:	81 bb       	out	0x11, r24	; 17

	__LCD5110_Port &= ~(1<<__LCD5110_R);				// Сброс дисплея
     48e:	94 98       	cbi	0x12, 4	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	8a 95       	dec	r24
     494:	f1 f7       	brne	.-4      	; 0x492 <LCD5110_Init+0xa>
     496:	00 c0       	rjmp	.+0      	; 0x498 <LCD5110_Init+0x10>
	_delay_us(1);
	__LCD5110_Port |= (1<<__LCD5110_R);
     498:	94 9a       	sbi	0x12, 4	; 18
	
	__LCD5110_Port &= ~(1<<__LCD5110_CE);				// Включение дисплея
     49a:	93 98       	cbi	0x12, 3	; 18
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	8a 95       	dec	r24
     4a0:	f1 f7       	brne	.-4      	; 0x49e <LCD5110_Init+0x16>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <LCD5110_Init+0x1c>
	_delay_us(1);
	__LCD5110_Port |= (1<<__LCD5110_CE);
     4a4:	93 9a       	sbi	0x12, 3	; 18
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	8a 95       	dec	r24
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD5110_Init+0x20>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <LCD5110_Init+0x26>
	_delay_us(1);
	
	LCD5110_SendByte(0b00100001, 0);					// Адресация: горизонтальная
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	81 e2       	ldi	r24, 0x21	; 33
     4b2:	c3 df       	rcall	.-122    	; 0x43a <LCD5110_SendByte>
														// Тип функций: расширенный 
	LCD5110_SendByte(0b11001000, 0);					// Напряжение на генераторе ПН 7.38 вольт 
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	88 ec       	ldi	r24, 0xC8	; 200
     4b8:	c0 df       	rcall	.-128    	; 0x43a <LCD5110_SendByte>
	LCD5110_SendByte(0b00000110, 0);					// Режим температурной коррекции 
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	86 e0       	ldi	r24, 0x06	; 6
     4be:	bd df       	rcall	.-134    	; 0x43a <LCD5110_SendByte>
	LCD5110_SendByte(0b00010011, 0);					// Напряжение смещения 
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	83 e1       	ldi	r24, 0x13	; 19
     4c4:	ba df       	rcall	.-140    	; 0x43a <LCD5110_SendByte>
	LCD5110_SendByte(0b00100000, 0);					// Тип функций: обычный 
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	80 e2       	ldi	r24, 0x20	; 32
     4ca:	b7 df       	rcall	.-146    	; 0x43a <LCD5110_SendByte>
	LCD5110_Clear();
     4cc:	cb df       	rcall	.-106    	; 0x464 <LCD5110_Clear>
	LCD5110_SendByte(0b00001100, 0);					// Инверсия: отключена
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	8c e0       	ldi	r24, 0x0C	; 12
     4d2:	b3 df       	rcall	.-154    	; 0x43a <LCD5110_SendByte>
														// Вывод изображения: включен 
	__LCD5110_Port &= ~(1<<__LCD5110_CE);
     4d4:	93 98       	cbi	0x12, 3	; 18
     4d6:	08 95       	ret

000004d8 <LCD5110_SetXY>:

//***************************************************************************
// Установка начала координат дисплея
//***************************************************************************
void LCD5110_SetXY(unsigned char X, unsigned char Y)
{
     4d8:	cf 93       	push	r28
     4da:	c8 2f       	mov	r28, r24
     4dc:	86 2f       	mov	r24, r22
	 LCD5110_SendByte(0x40 | Y, 0);						// Строка
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	80 64       	ori	r24, 0x40	; 64
     4e2:	ab df       	rcall	.-170    	; 0x43a <LCD5110_SendByte>
	 LCD5110_SendByte(0x80 | X, 0);						// Столбец
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	8c 2f       	mov	r24, r28
     4e8:	80 68       	ori	r24, 0x80	; 128
     4ea:	a7 df       	rcall	.-178    	; 0x43a <LCD5110_SendByte>
}
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <LCD5110_Putc>:

//***************************************************************************
// Вывод символа на дисплей
//***************************************************************************
void LCD5110_Putc(unsigned char c)
{
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
	unsigned char i;
	
	if (c >= 'А')
     4f8:	80 3c       	cpi	r24, 0xC0	; 192
     4fa:	10 f0       	brcs	.+4      	; 0x500 <LCD5110_Putc+0x10>
		c -= 97;
     4fc:	81 56       	subi	r24, 0x61	; 97
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <LCD5110_Putc+0x12>
	else
		c -= 32;
     500:	80 52       	subi	r24, 0x20	; 32
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	8c 01       	movw	r16, r24
     506:	00 0f       	add	r16, r16
     508:	11 1f       	adc	r17, r17
     50a:	00 0f       	add	r16, r16
     50c:	11 1f       	adc	r17, r17
     50e:	08 0f       	add	r16, r24
     510:	19 1f       	adc	r17, r25

//***************************************************************************
// Вывод символа на дисплей
//***************************************************************************
void LCD5110_Putc(unsigned char c)
{
     512:	c0 e0       	ldi	r28, 0x00	; 0
     514:	d0 e0       	ldi	r29, 0x00	; 0
     516:	fe 01       	movw	r30, r28
     518:	e0 0f       	add	r30, r16
     51a:	f1 1f       	adc	r31, r17
     51c:	ea 51       	subi	r30, 0x1A	; 26
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
		c -= 97;
	else
		c -= 32;
	
	for (i = 0; i < 5; i++)
		LCD5110_SendByte(pgm_read_byte(SmallFont[c]+i), 1);
     520:	84 91       	lpm	r24, Z
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	8a df       	rcall	.-236    	; 0x43a <LCD5110_SendByte>
     526:	21 96       	adiw	r28, 0x01	; 1
	if (c >= 'А')
		c -= 97;
	else
		c -= 32;
	
	for (i = 0; i < 5; i++)
     528:	c5 30       	cpi	r28, 0x05	; 5
     52a:	d1 05       	cpc	r29, r1
     52c:	a1 f7       	brne	.-24     	; 0x516 <LCD5110_Putc+0x26>
		LCD5110_SendByte(pgm_read_byte(SmallFont[c]+i), 1);
	LCD5110_SendByte(0, 1);
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	83 df       	rcall	.-250    	; 0x43a <LCD5110_SendByte>
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	08 95       	ret

0000053e <LCD5110_Prints>:

//***************************************************************************
// Вывод строки на дисплей
//***************************************************************************
void LCD5110_Prints(char *s, unsigned char X, unsigned char Y)
{
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ec 01       	movw	r28, r24
     544:	86 2f       	mov	r24, r22
	LCD5110_SetXY(X,Y);
     546:	64 2f       	mov	r22, r20
     548:	c7 df       	rcall	.-114    	; 0x4d8 <LCD5110_SetXY>
	while (*s)
     54a:	88 81       	ld	r24, Y
     54c:	88 23       	and	r24, r24
     54e:	29 f0       	breq	.+10     	; 0x55a <LCD5110_Prints+0x1c>
     550:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD5110_Putc(*s);
     552:	ce df       	rcall	.-100    	; 0x4f0 <LCD5110_Putc>
// Вывод строки на дисплей
//***************************************************************************
void LCD5110_Prints(char *s, unsigned char X, unsigned char Y)
{
	LCD5110_SetXY(X,Y);
	while (*s)
     554:	89 91       	ld	r24, Y+
     556:	81 11       	cpse	r24, r1
     558:	fc cf       	rjmp	.-8      	; 0x552 <LCD5110_Prints+0x14>
	{
		LCD5110_Putc(*s);
		s++;
	}
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <HeaderPrints>:
}



void HeaderPrints(char *s)
{
     560:	3f 92       	push	r3
     562:	4f 92       	push	r4
     564:	5f 92       	push	r5
     566:	6f 92       	push	r6
     568:	7f 92       	push	r7
     56a:	8f 92       	push	r8
     56c:	9f 92       	push	r9
     56e:	af 92       	push	r10
     570:	bf 92       	push	r11
     572:	cf 92       	push	r12
     574:	df 92       	push	r13
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	5c 01       	movw	r10, r24
	unsigned char length = 0;
	unsigned char i, sm;
	
	while (s[length])
     584:	fc 01       	movw	r30, r24
     586:	80 81       	ld	r24, Z
     588:	88 23       	and	r24, r24
     58a:	49 f0       	breq	.+18     	; 0x59e <HeaderPrints+0x3e>
     58c:	10 e0       	ldi	r17, 0x00	; 0
		length++;
     58e:	1f 5f       	subi	r17, 0xFF	; 255
void HeaderPrints(char *s)
{
	unsigned char length = 0;
	unsigned char i, sm;
	
	while (s[length])
     590:	f5 01       	movw	r30, r10
     592:	e1 0f       	add	r30, r17
     594:	f1 1d       	adc	r31, r1
     596:	80 81       	ld	r24, Z
     598:	81 11       	cpse	r24, r1
     59a:	f9 cf       	rjmp	.-14     	; 0x58e <HeaderPrints+0x2e>
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <HeaderPrints+0x40>



void HeaderPrints(char *s)
{
	unsigned char length = 0;
     59e:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i, sm;
	
	while (s[length])
		length++;
	
	LCD5110_SetXY(0, 0);
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	99 df       	rcall	.-206    	; 0x4d8 <LCD5110_SetXY>
     5a6:	c8 ea       	ldi	r28, 0xA8	; 168
	for (i = 0; i < 84*2; i++)
		LCD5110_SendByte(0xFF, 1);
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	8f ef       	ldi	r24, 0xFF	; 255
     5ac:	46 df       	rcall	.-372    	; 0x43a <LCD5110_SendByte>
     5ae:	c1 50       	subi	r28, 0x01	; 1
	
	while (s[length])
		length++;
	
	LCD5110_SetXY(0, 0);
	for (i = 0; i < 84*2; i++)
     5b0:	d9 f7       	brne	.-10     	; 0x5a8 <HeaderPrints+0x48>
		LCD5110_SendByte(0xFF, 1);
	
	for (unsigned char str = 0; str <= 1; str++)
	{
		LCD5110_SetXY((84-length*6)/2, str);
     5b2:	2a ef       	ldi	r18, 0xFA	; 250
     5b4:	21 03       	mulsu	r18, r17
     5b6:	c0 01       	movw	r24, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	8c 5a       	subi	r24, 0xAC	; 172
     5bc:	9f 4f       	sbci	r25, 0xFF	; 255
     5be:	3c 01       	movw	r6, r24
     5c0:	1a f4       	brpl	.+6      	; 0x5c8 <HeaderPrints+0x68>
     5c2:	ef ef       	ldi	r30, 0xFF	; 255
     5c4:	6e 1a       	sub	r6, r30
     5c6:	7e 0a       	sbc	r7, r30
     5c8:	75 94       	asr	r7
     5ca:	67 94       	ror	r6
     5cc:	d1 2c       	mov	r13, r1
		i = 0;
		while(s[i])
     5ce:	3a 2c       	mov	r3, r10
     5d0:	4b 2c       	mov	r4, r11
     5d2:	51 2c       	mov	r5, r1
		{
			if (s[i] >= 'А')
				
				sm = 97;
			else
				sm = 32;
     5d4:	81 2c       	mov	r8, r1
     5d6:	91 2c       	mov	r9, r1
		i = 0;
		while(s[i])
		{
			if (s[i] >= 'А')
				
				sm = 97;
     5d8:	0f 2e       	mov	r0, r31
     5da:	f1 e6       	ldi	r31, 0x61	; 97
     5dc:	7f 2e       	mov	r7, r31
     5de:	f0 2d       	mov	r31, r0
	for (i = 0; i < 84*2; i++)
		LCD5110_SendByte(0xFF, 1);
	
	for (unsigned char str = 0; str <= 1; str++)
	{
		LCD5110_SetXY((84-length*6)/2, str);
     5e0:	6d 2d       	mov	r22, r13
     5e2:	86 2d       	mov	r24, r6
     5e4:	79 df       	rcall	.-270    	; 0x4d8 <LCD5110_SetXY>
		i = 0;
		while(s[i])
     5e6:	f5 01       	movw	r30, r10
     5e8:	80 81       	ld	r24, Z
     5ea:	88 23       	and	r24, r24
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <HeaderPrints+0x90>
     5ee:	49 c0       	rjmp	.+146    	; 0x682 <HeaderPrints+0x122>
     5f0:	e3 2c       	mov	r14, r3
     5f2:	f4 2c       	mov	r15, r4
     5f4:	c5 2c       	mov	r12, r5
		{
			if (s[i] >= 'А')
     5f6:	80 3c       	cpi	r24, 0xC0	; 192
     5f8:	10 f4       	brcc	.+4      	; 0x5fe <HeaderPrints+0x9e>
				
				sm = 97;
			else
				sm = 32;
     5fa:	00 e2       	ldi	r16, 0x20	; 32
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <HeaderPrints+0xa0>
		i = 0;
		while(s[i])
		{
			if (s[i] >= 'А')
				
				sm = 97;
     5fe:	07 2d       	mov	r16, r7
			else
				sm = 32;
     600:	c8 2d       	mov	r28, r8
     602:	d9 2d       	mov	r29, r9
			
			for (unsigned char j = 0; j < 5; j++)
				if (str)
					LCD5110_SendByte(~(pgm_read_byte(SmallFont[s[i]-sm]+j)>>4), 1); 
				else
					LCD5110_SendByte(~(pgm_read_byte(SmallFont[s[i]-sm]+j)<<4), 1);
     604:	10 e0       	ldi	r17, 0x00	; 0
				sm = 97;
			else
				sm = 32;
			
			for (unsigned char j = 0; j < 5; j++)
				if (str)
     606:	dd 20       	and	r13, r13
     608:	b9 f0       	breq	.+46     	; 0x638 <HeaderPrints+0xd8>
					LCD5110_SendByte(~(pgm_read_byte(SmallFont[s[i]-sm]+j)>>4), 1); 
     60a:	f7 01       	movw	r30, r14
     60c:	80 81       	ld	r24, Z
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	80 1b       	sub	r24, r16
     612:	91 0b       	sbc	r25, r17
     614:	fc 01       	movw	r30, r24
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	ee 0f       	add	r30, r30
     61c:	ff 1f       	adc	r31, r31
     61e:	e8 0f       	add	r30, r24
     620:	f9 1f       	adc	r31, r25
     622:	ea 51       	subi	r30, 0x1A	; 26
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	ec 0f       	add	r30, r28
     628:	fd 1f       	adc	r31, r29
     62a:	84 91       	lpm	r24, Z
     62c:	82 95       	swap	r24
     62e:	8f 70       	andi	r24, 0x0F	; 15
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	80 95       	com	r24
     634:	02 df       	rcall	.-508    	; 0x43a <LCD5110_SendByte>
     636:	16 c0       	rjmp	.+44     	; 0x664 <HeaderPrints+0x104>
				else
					LCD5110_SendByte(~(pgm_read_byte(SmallFont[s[i]-sm]+j)<<4), 1);
     638:	f7 01       	movw	r30, r14
     63a:	80 81       	ld	r24, Z
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	80 1b       	sub	r24, r16
     640:	91 0b       	sbc	r25, r17
     642:	fc 01       	movw	r30, r24
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	e8 0f       	add	r30, r24
     64e:	f9 1f       	adc	r31, r25
     650:	ea 51       	subi	r30, 0x1A	; 26
     652:	ff 4f       	sbci	r31, 0xFF	; 255
     654:	ec 0f       	add	r30, r28
     656:	fd 1f       	adc	r31, r29
     658:	84 91       	lpm	r24, Z
     65a:	82 95       	swap	r24
     65c:	80 7f       	andi	r24, 0xF0	; 240
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	80 95       	com	r24
     662:	eb de       	rcall	.-554    	; 0x43a <LCD5110_SendByte>
     664:	21 96       	adiw	r28, 0x01	; 1
				
				sm = 97;
			else
				sm = 32;
			
			for (unsigned char j = 0; j < 5; j++)
     666:	c5 30       	cpi	r28, 0x05	; 5
     668:	d1 05       	cpc	r29, r1
     66a:	69 f6       	brne	.-102    	; 0x606 <HeaderPrints+0xa6>
				if (str)
					LCD5110_SendByte(~(pgm_read_byte(SmallFont[s[i]-sm]+j)>>4), 1); 
				else
					LCD5110_SendByte(~(pgm_read_byte(SmallFont[s[i]-sm]+j)<<4), 1);
				
			LCD5110_SendByte(0xFF, 1);
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	e4 de       	rcall	.-568    	; 0x43a <LCD5110_SendByte>
			i++;
     672:	c3 94       	inc	r12
	
	for (unsigned char str = 0; str <= 1; str++)
	{
		LCD5110_SetXY((84-length*6)/2, str);
		i = 0;
		while(s[i])
     674:	75 01       	movw	r14, r10
     676:	ec 0c       	add	r14, r12
     678:	f1 1c       	adc	r15, r1
     67a:	f7 01       	movw	r30, r14
     67c:	80 81       	ld	r24, Z
     67e:	81 11       	cpse	r24, r1
     680:	ba cf       	rjmp	.-140    	; 0x5f6 <HeaderPrints+0x96>
	
	LCD5110_SetXY(0, 0);
	for (i = 0; i < 84*2; i++)
		LCD5110_SendByte(0xFF, 1);
	
	for (unsigned char str = 0; str <= 1; str++)
     682:	d3 94       	inc	r13
     684:	f2 e0       	ldi	r31, 0x02	; 2
     686:	df 12       	cpse	r13, r31
     688:	ab cf       	rjmp	.-170    	; 0x5e0 <HeaderPrints+0x80>
			LCD5110_SendByte(0xFF, 1);
			i++;
		}
	}
	
}
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	ff 90       	pop	r15
     694:	ef 90       	pop	r14
     696:	df 90       	pop	r13
     698:	cf 90       	pop	r12
     69a:	bf 90       	pop	r11
     69c:	af 90       	pop	r10
     69e:	9f 90       	pop	r9
     6a0:	8f 90       	pop	r8
     6a2:	7f 90       	pop	r7
     6a4:	6f 90       	pop	r6
     6a6:	5f 90       	pop	r5
     6a8:	4f 90       	pop	r4
     6aa:	3f 90       	pop	r3
     6ac:	08 95       	ret

000006ae <LCD5110_LargeNumPrints>:


void LCD5110_LargeNumPrints(char *s, unsigned char X, unsigned char Y)
{
     6ae:	9f 92       	push	r9
     6b0:	af 92       	push	r10
     6b2:	bf 92       	push	r11
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
	unsigned char n = 0;
	while (s[n])
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 81       	ld	r18, Z
     6c8:	22 23       	and	r18, r18
     6ca:	c9 f1       	breq	.+114    	; 0x73e <LCD5110_LargeNumPrints+0x90>
     6cc:	b4 2e       	mov	r11, r20
     6ce:	7c 01       	movw	r14, r24
     6d0:	d6 2e       	mov	r13, r22
     6d2:	8c 01       	movw	r16, r24
     6d4:	c1 2c       	mov	r12, r1
	{
		LCD5110_SetXY(X+n*8, Y);
		
		unsigned char c;
		if (s[n] == ' ')
			c = 0;
     6d6:	a1 2c       	mov	r10, r1
		else
			if (s[n] == ':')
				c = 1;
     6d8:	d1 e0       	ldi	r29, 0x01	; 1
				
		for (unsigned char i = 0; i < 16; i++)
		{
			LCD5110_SendByte(pgm_read_byte(LargeNum[c]+i), 1);	
			if (i == 7)
			LCD5110_SetXY(X+n*8, Y+1);	
     6da:	99 24       	eor	r9, r9
     6dc:	93 94       	inc	r9
     6de:	94 0e       	add	r9, r20
void LCD5110_LargeNumPrints(char *s, unsigned char X, unsigned char Y)
{
	unsigned char n = 0;
	while (s[n])
	{
		LCD5110_SetXY(X+n*8, Y);
     6e0:	6b 2d       	mov	r22, r11
     6e2:	8d 2d       	mov	r24, r13
     6e4:	f9 de       	rcall	.-526    	; 0x4d8 <LCD5110_SetXY>
		
		unsigned char c;
		if (s[n] == ' ')
     6e6:	f8 01       	movw	r30, r16
     6e8:	00 81       	ld	r16, Z
     6ea:	00 32       	cpi	r16, 0x20	; 32
     6ec:	21 f0       	breq	.+8      	; 0x6f6 <LCD5110_LargeNumPrints+0x48>
			c = 0;
		else
			if (s[n] == ':')
     6ee:	0a 33       	cpi	r16, 0x3A	; 58
     6f0:	21 f0       	breq	.+8      	; 0x6fa <LCD5110_LargeNumPrints+0x4c>
				c = 1;
			else
				c = s[n]-'0'+2;
     6f2:	0e 52       	subi	r16, 0x2E	; 46
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <LCD5110_LargeNumPrints+0x4e>
	{
		LCD5110_SetXY(X+n*8, Y);
		
		unsigned char c;
		if (s[n] == ' ')
			c = 0;
     6f6:	0a 2d       	mov	r16, r10
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <LCD5110_LargeNumPrints+0x4e>
		else
			if (s[n] == ':')
				c = 1;
     6fa:	0d 2f       	mov	r16, r29
     6fc:	f0 e1       	ldi	r31, 0x10	; 16
     6fe:	0f 9f       	mul	r16, r31
     700:	80 01       	movw	r16, r0
     702:	11 24       	eor	r1, r1
     704:	0a 5d       	subi	r16, 0xDA	; 218
     706:	1f 4f       	sbci	r17, 0xFF	; 255
     708:	cd 2f       	mov	r28, r29
     70a:	03 c0       	rjmp	.+6      	; 0x712 <LCD5110_LargeNumPrints+0x64>
     70c:	0f 5f       	subi	r16, 0xFF	; 255
     70e:	1f 4f       	sbci	r17, 0xFF	; 255
     710:	cf 5f       	subi	r28, 0xFF	; 255
			else
				c = s[n]-'0'+2;
				
		for (unsigned char i = 0; i < 16; i++)
		{
			LCD5110_SendByte(pgm_read_byte(LargeNum[c]+i), 1);	
     712:	f8 01       	movw	r30, r16
     714:	84 91       	lpm	r24, Z
     716:	6d 2f       	mov	r22, r29
     718:	90 de       	rcall	.-736    	; 0x43a <LCD5110_SendByte>
			if (i == 7)
     71a:	c8 30       	cpi	r28, 0x08	; 8
     71c:	21 f4       	brne	.+8      	; 0x726 <LCD5110_LargeNumPrints+0x78>
			LCD5110_SetXY(X+n*8, Y+1);	
     71e:	69 2d       	mov	r22, r9
     720:	8d 2d       	mov	r24, r13
     722:	da de       	rcall	.-588    	; 0x4d8 <LCD5110_SetXY>
     724:	f3 cf       	rjmp	.-26     	; 0x70c <LCD5110_LargeNumPrints+0x5e>
			if (s[n] == ':')
				c = 1;
			else
				c = s[n]-'0'+2;
				
		for (unsigned char i = 0; i < 16; i++)
     726:	c0 31       	cpi	r28, 0x10	; 16
     728:	88 f3       	brcs	.-30     	; 0x70c <LCD5110_LargeNumPrints+0x5e>
		{
			LCD5110_SendByte(pgm_read_byte(LargeNum[c]+i), 1);	
			if (i == 7)
			LCD5110_SetXY(X+n*8, Y+1);	
		}
		n++;
     72a:	c3 94       	inc	r12


void LCD5110_LargeNumPrints(char *s, unsigned char X, unsigned char Y)
{
	unsigned char n = 0;
	while (s[n])
     72c:	87 01       	movw	r16, r14
     72e:	0c 0d       	add	r16, r12
     730:	11 1d       	adc	r17, r1
     732:	f8 e0       	ldi	r31, 0x08	; 8
     734:	df 0e       	add	r13, r31
     736:	f8 01       	movw	r30, r16
     738:	80 81       	ld	r24, Z
     73a:	81 11       	cpse	r24, r1
     73c:	d1 cf       	rjmp	.-94     	; 0x6e0 <LCD5110_LargeNumPrints+0x32>
			if (i == 7)
			LCD5110_SetXY(X+n*8, Y+1);	
		}
		n++;
	}
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	bf 90       	pop	r11
     750:	af 90       	pop	r10
     752:	9f 90       	pop	r9
     754:	08 95       	ret

00000756 <ENC_Check>:
//***************************************************************************
// Проверка состояния энкодера
//***************************************************************************
void ENC_Check(void)
{
	if ( (__ENC_PrevState == ((1<<__ENC_E1)|(1<<__ENC_E2))) &&
     756:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__ENC_PrevState>
     75a:	80 33       	cpi	r24, 0x30	; 48
     75c:	79 f4       	brne	.+30     	; 0x77c <ENC_Check+0x26>
			((__ENC_PIN&((1<<__ENC_E1)|(1<<__ENC_E2)))!=((1<<__ENC_E1)|(1<<__ENC_E2))) )
     75e:	83 b3       	in	r24, 0x13	; 19
     760:	80 73       	andi	r24, 0x30	; 48
//***************************************************************************
// Проверка состояния энкодера
//***************************************************************************
void ENC_Check(void)
{
	if ( (__ENC_PrevState == ((1<<__ENC_E1)|(1<<__ENC_E2))) &&
     762:	80 33       	cpi	r24, 0x30	; 48
     764:	59 f0       	breq	.+22     	; 0x77c <ENC_Check+0x26>
			((__ENC_PIN&((1<<__ENC_E1)|(1<<__ENC_E2)))!=((1<<__ENC_E1)|(1<<__ENC_E2))) )
	{
		if ( (__ENC_PIN & ((1<<__ENC_E1)|(1<<__ENC_E2))) != ((1<<__ENC_E1)|(0<<__ENC_E2)) )
     766:	83 b3       	in	r24, 0x13	; 19
     768:	80 73       	andi	r24, 0x30	; 48
     76a:	80 32       	cpi	r24, 0x20	; 32
     76c:	21 f0       	breq	.+8      	; 0x776 <ENC_Check+0x20>
		{
			SendTask(ENC_Inc);
     76e:	86 e2       	ldi	r24, 0x26	; 38
     770:	97 e0       	ldi	r25, 0x07	; 7
     772:	62 d0       	rcall	.+196    	; 0x838 <SendTask>
     774:	03 c0       	rjmp	.+6      	; 0x77c <ENC_Check+0x26>
		}
		else
		{
			SendTask(ENC_Dec);
     776:	8c eb       	ldi	r24, 0xBC	; 188
     778:	97 e0       	ldi	r25, 0x07	; 7
     77a:	5e d0       	rcall	.+188    	; 0x838 <SendTask>
		}
	}
	__ENC_PrevState = __ENC_PIN & ((1<<__ENC_E1)|(1<<__ENC_E2));
     77c:	83 b3       	in	r24, 0x13	; 19
     77e:	80 73       	andi	r24, 0x30	; 48
     780:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__ENC_PrevState>

	if (!(__ENC_PIN & (1<<__ENC_But)))										// Если кнопка нажата...
     784:	9b 99       	sbic	0x13, 3	; 19
     786:	0d c0       	rjmp	.+26     	; 0x7a2 <ENC_Check+0x4c>
	{
		if (__ENC_But_CNT != 0)												// ...то если мы не отсчитали задержку длинного нажатия...
     788:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <__ENC_But_CNT>
     78c:	88 23       	and	r24, r24
     78e:	a9 f0       	breq	.+42     	; 0x7ba <ENC_Check+0x64>
		{
			__ENC_But_CNT--;												// ...декрементируем счетчик задержки кнопки.
     790:	81 50       	subi	r24, 0x01	; 1
     792:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <__ENC_But_CNT>
			if (__ENC_But_CNT == 0)											// Если наконец отсчитали нашу задержку...
     796:	81 11       	cpse	r24, r1
     798:	10 c0       	rjmp	.+32     	; 0x7ba <ENC_Check+0x64>
			{
				SendTask(ENC_LongPress);									// ...вызываем обработчик длинного нажатия кнопки.
     79a:	8f ee       	ldi	r24, 0xEF	; 239
     79c:	98 e0       	ldi	r25, 0x08	; 8
     79e:	4c d0       	rcall	.+152    	; 0x838 <SendTask>
     7a0:	0c c0       	rjmp	.+24     	; 0x7ba <ENC_Check+0x64>
			}
		}
	}
	else																	// ...иначе, если кнопка отпущена...
	{
		if ((__ENC_But_CNT != 0) && (__ENC_But_CNT != __ENC_But_Delay))		// ...проверяем, если кнопка была нажата и это было не длинное нажатие...
     7a2:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <__ENC_But_CNT>
     7a6:	88 23       	and	r24, r24
     7a8:	29 f0       	breq	.+10     	; 0x7b4 <ENC_Check+0x5e>
     7aa:	84 36       	cpi	r24, 0x64	; 100
     7ac:	19 f0       	breq	.+6      	; 0x7b4 <ENC_Check+0x5e>
		{
			SendTask(ENC_ShortPress);										// ...вызываем обработчик короткого нажатия кнопки.
     7ae:	83 e8       	ldi	r24, 0x83	; 131
     7b0:	98 e0       	ldi	r25, 0x08	; 8
     7b2:	42 d0       	rcall	.+132    	; 0x838 <SendTask>
		}
		__ENC_But_CNT = __ENC_But_Delay;									// Сбрасываем счетчик задержки длинного нажатия кнопки.
     7b4:	84 e6       	ldi	r24, 0x64	; 100
     7b6:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <__ENC_But_CNT>
	}

	
	SendTimerTask(ENC_Check, __ENC_Time);
     7ba:	65 e0       	ldi	r22, 0x05	; 5
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	8b ea       	ldi	r24, 0xAB	; 171
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	8b d0       	rcall	.+278    	; 0x8da <SendTimerTask>
     7c4:	08 95       	ret

000007c6 <ENC_Init>:
//***************************************************************************
// Инициализация энкодера
//***************************************************************************
void ENC_Init(void)
{
	__ENC_PrevState = ((1<<__ENC_E1)|(1<<__ENC_E2));
     7c6:	80 e3       	ldi	r24, 0x30	; 48
     7c8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__ENC_PrevState>
	__ENC_But_CNT = __ENC_But_Delay;
     7cc:	84 e6       	ldi	r24, 0x64	; 100
     7ce:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <__ENC_But_CNT>
	
	__ENC_DDR &= ~((1<<__ENC_E1)|(1<<__ENC_E2)|(1<<__ENC_But));
     7d2:	84 b3       	in	r24, 0x14	; 20
     7d4:	87 7c       	andi	r24, 0xC7	; 199
     7d6:	84 bb       	out	0x14, r24	; 20
	__ENC_PORT |= ((1<<__ENC_E1)|(1<<__ENC_E2)|(1<<__ENC_But));
     7d8:	85 b3       	in	r24, 0x15	; 21
     7da:	88 63       	ori	r24, 0x38	; 56
     7dc:	85 bb       	out	0x15, r24	; 21
	
	SendTask(ENC_Check);
     7de:	8b ea       	ldi	r24, 0xAB	; 171
     7e0:	93 e0       	ldi	r25, 0x03	; 3
     7e2:	2a d0       	rcall	.+84     	; 0x838 <SendTask>
     7e4:	08 95       	ret

000007e6 <Idle>:
		{
			SendTask(__TS_TimerTaskQueue[i].Task);							// ...пхаем эту задачу в диспетчер задач
			__TS_TimerTaskQueue[i].Task = Idle;								// и пишем на ее место затычку.
		}
	}
}
     7e6:	08 95       	ret

000007e8 <RTOS_Init>:
     7e8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TM_Start>
     7ec:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__TM_End>
     7f0:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__TM_TaskCnt>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	23 ef       	ldi	r18, 0xF3	; 243
     7fa:	33 e0       	ldi	r19, 0x03	; 3
     7fc:	fc 01       	movw	r30, r24
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	ee 51       	subi	r30, 0x1E	; 30
     808:	ff 4f       	sbci	r31, 0xFF	; 255
     80a:	31 83       	std	Z+1, r19	; 0x01
     80c:	20 83       	st	Z, r18
     80e:	13 82       	std	Z+3, r1	; 0x03
     810:	12 82       	std	Z+2, r1	; 0x02
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	8f 30       	cpi	r24, 0x0F	; 15
     816:	91 05       	cpc	r25, r1
     818:	89 f7       	brne	.-30     	; 0x7fc <RTOS_Init+0x14>
     81a:	08 95       	ret

0000081c <RTOS_Run>:
     81c:	f8 94       	cli
     81e:	83 b7       	in	r24, 0x33	; 51
     820:	8b 7f       	andi	r24, 0xFB	; 251
     822:	83 bf       	out	0x33, r24	; 51
     824:	83 b7       	in	r24, 0x33	; 51
     826:	83 60       	ori	r24, 0x03	; 3
     828:	83 bf       	out	0x33, r24	; 51
     82a:	83 e8       	ldi	r24, 0x83	; 131
     82c:	82 bf       	out	0x32, r24	; 50
     82e:	89 b7       	in	r24, 0x39	; 57
     830:	81 60       	ori	r24, 0x01	; 1
     832:	89 bf       	out	0x39, r24	; 57
     834:	78 94       	sei
     836:	08 95       	ret

00000838 <SendTask>:
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	07 fe       	sbrs	r0, 7
     83c:	16 c0       	rjmp	.+44     	; 0x86a <SendTask+0x32>
     83e:	f8 94       	cli
     840:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <__TM_TaskCnt>
     844:	24 31       	cpi	r18, 0x14	; 20
     846:	e0 f0       	brcs	.+56     	; 0x880 <SendTask+0x48>
     848:	0e c0       	rjmp	.+28     	; 0x866 <SendTask+0x2e>
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	01 c0       	rjmp	.+2      	; 0x850 <SendTask+0x18>
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <__TM_End>
     854:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <__TM_TaskCnt>
     858:	8f 5f       	subi	r24, 0xFF	; 255
     85a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <__TM_TaskCnt>
     85e:	99 23       	and	r25, r25
     860:	d9 f1       	breq	.+118    	; 0x8d8 <SendTask+0xa0>
     862:	78 94       	sei
     864:	08 95       	ret
     866:	78 94       	sei
     868:	08 95       	ret
     86a:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <__TM_TaskCnt>
     86e:	24 31       	cpi	r18, 0x14	; 20
     870:	00 f1       	brcs	.+64     	; 0x8b2 <SendTask+0x7a>
     872:	08 95       	ret
     874:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <__TM_TaskCnt>
     878:	8f 5f       	subi	r24, 0xFF	; 255
     87a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <__TM_TaskCnt>
     87e:	f1 cf       	rjmp	.-30     	; 0x862 <SendTask+0x2a>
     880:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <__TM_End>
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	e2 5e       	subi	r30, 0xE2	; 226
     88c:	fe 4f       	sbci	r31, 0xFE	; 254
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	80 83       	st	Z, r24
     892:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TM_End>
     896:	8f 5f       	subi	r24, 0xFF	; 255
     898:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TM_End>
     89c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TM_End>
     8a0:	84 31       	cpi	r24, 0x14	; 20
     8a2:	41 f7       	brne	.-48     	; 0x874 <SendTask+0x3c>
     8a4:	d2 cf       	rjmp	.-92     	; 0x84a <SendTask+0x12>
     8a6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <__TM_TaskCnt>
     8aa:	8f 5f       	subi	r24, 0xFF	; 255
     8ac:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <__TM_TaskCnt>
     8b0:	08 95       	ret
     8b2:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <__TM_End>
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	ee 0f       	add	r30, r30
     8ba:	ff 1f       	adc	r31, r31
     8bc:	e2 5e       	subi	r30, 0xE2	; 226
     8be:	fe 4f       	sbci	r31, 0xFE	; 254
     8c0:	91 83       	std	Z+1, r25	; 0x01
     8c2:	80 83       	st	Z, r24
     8c4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TM_End>
     8c8:	8f 5f       	subi	r24, 0xFF	; 255
     8ca:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <__TM_End>
     8ce:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TM_End>
     8d2:	84 31       	cpi	r24, 0x14	; 20
     8d4:	41 f7       	brne	.-48     	; 0x8a6 <SendTask+0x6e>
     8d6:	bb cf       	rjmp	.-138    	; 0x84e <SendTask+0x16>
     8d8:	08 95       	ret

000008da <SendTimerTask>:
     8da:	cf 93       	push	r28
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	07 fe       	sbrs	r0, 7
     8e0:	0c c0       	rjmp	.+24     	; 0x8fa <SendTimerTask+0x20>
     8e2:	f8 94       	cli
     8e4:	c1 e0       	ldi	r28, 0x01	; 1
     8e6:	0a c0       	rjmp	.+20     	; 0x8fc <SendTimerTask+0x22>
     8e8:	2f 5f       	subi	r18, 0xFF	; 255
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	2f 30       	cpi	r18, 0x0F	; 15
     8ee:	31 05       	cpc	r19, r1
     8f0:	39 f4       	brne	.+14     	; 0x900 <SendTimerTask+0x26>
     8f2:	cc 23       	and	r28, r28
     8f4:	11 f1       	breq	.+68     	; 0x93a <SendTimerTask+0x60>
     8f6:	78 94       	sei
     8f8:	20 c0       	rjmp	.+64     	; 0x93a <SendTimerTask+0x60>
     8fa:	c0 e0       	ldi	r28, 0x00	; 0
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	d9 01       	movw	r26, r18
     902:	f9 01       	movw	r30, r18
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	ee 51       	subi	r30, 0x1E	; 30
     90e:	ff 4f       	sbci	r31, 0xFF	; 255
     910:	40 81       	ld	r20, Z
     912:	51 81       	ldd	r21, Z+1	; 0x01
     914:	43 5f       	subi	r20, 0xF3	; 243
     916:	53 40       	sbci	r21, 0x03	; 3
     918:	39 f7       	brne	.-50     	; 0x8e8 <SendTimerTask+0xe>
     91a:	cc 23       	and	r28, r28
     91c:	09 f0       	breq	.+2      	; 0x920 <SendTimerTask+0x46>
     91e:	78 94       	sei
     920:	aa 0f       	add	r26, r26
     922:	bb 1f       	adc	r27, r27
     924:	aa 0f       	add	r26, r26
     926:	bb 1f       	adc	r27, r27
     928:	ae 51       	subi	r26, 0x1E	; 30
     92a:	bf 4f       	sbci	r27, 0xFF	; 255
     92c:	11 96       	adiw	r26, 0x01	; 1
     92e:	9c 93       	st	X, r25
     930:	8e 93       	st	-X, r24
     932:	13 96       	adiw	r26, 0x03	; 3
     934:	7c 93       	st	X, r23
     936:	6e 93       	st	-X, r22
     938:	12 97       	sbiw	r26, 0x02	; 2
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <UpdateTimerTask>:
     93e:	dc 01       	movw	r26, r24
     940:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__data_end>
     944:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <__data_end+0x1>
     948:	8a 17       	cp	r24, r26
     94a:	9b 07       	cpc	r25, r27
     94c:	89 f0       	breq	.+34     	; 0x970 <UpdateTimerTask+0x32>
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	9f 5f       	subi	r25, 0xFF	; 255
     952:	29 2f       	mov	r18, r25
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	f9 01       	movw	r30, r18
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	ee 51       	subi	r30, 0x1E	; 30
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	40 81       	ld	r20, Z
     966:	51 81       	ldd	r21, Z+1	; 0x01
     968:	4a 17       	cp	r20, r26
     96a:	5b 07       	cpc	r21, r27
     96c:	89 f7       	brne	.-30     	; 0x950 <UpdateTimerTask+0x12>
     96e:	02 c0       	rjmp	.+4      	; 0x974 <UpdateTimerTask+0x36>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	22 0f       	add	r18, r18
     976:	33 1f       	adc	r19, r19
     978:	22 0f       	add	r18, r18
     97a:	33 1f       	adc	r19, r19
     97c:	f9 01       	movw	r30, r18
     97e:	ee 51       	subi	r30, 0x1E	; 30
     980:	ff 4f       	sbci	r31, 0xFF	; 255
     982:	73 83       	std	Z+3, r23	; 0x03
     984:	62 83       	std	Z+2, r22	; 0x02
     986:	08 95       	ret

00000988 <RemoveTask>:
     988:	bc 01       	movw	r22, r24
     98a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__data_end>
     98e:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <__data_end+0x1>
     992:	86 17       	cp	r24, r22
     994:	97 07       	cpc	r25, r23
     996:	51 f4       	brne	.+20     	; 0x9ac <RemoveTask+0x24>
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	17 c0       	rjmp	.+46     	; 0x9ca <RemoveTask+0x42>
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	92 0f       	add	r25, r18
     9a0:	2f 5f       	subi	r18, 0xFF	; 255
     9a2:	3f 4f       	sbci	r19, 0xFF	; 255
     9a4:	2f 30       	cpi	r18, 0x0F	; 15
     9a6:	31 05       	cpc	r19, r1
     9a8:	19 f4       	brne	.+6      	; 0x9b0 <RemoveTask+0x28>
     9aa:	0f c0       	rjmp	.+30     	; 0x9ca <RemoveTask+0x42>
     9ac:	21 e0       	ldi	r18, 0x01	; 1
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	92 2f       	mov	r25, r18
     9b2:	f9 01       	movw	r30, r18
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	ee 51       	subi	r30, 0x1E	; 30
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	40 81       	ld	r20, Z
     9c2:	51 81       	ldd	r21, Z+1	; 0x01
     9c4:	46 17       	cp	r20, r22
     9c6:	57 07       	cpc	r21, r23
     9c8:	49 f7       	brne	.-46     	; 0x99c <RemoveTask+0x14>
     9ca:	e9 2f       	mov	r30, r25
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	ee 0f       	add	r30, r30
     9d0:	ff 1f       	adc	r31, r31
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	ee 51       	subi	r30, 0x1E	; 30
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	83 ef       	ldi	r24, 0xF3	; 243
     9dc:	93 e0       	ldi	r25, 0x03	; 3
     9de:	91 83       	std	Z+1, r25	; 0x01
     9e0:	80 83       	st	Z, r24
     9e2:	82 81       	ldd	r24, Z+2	; 0x02
     9e4:	93 81       	ldd	r25, Z+3	; 0x03
     9e6:	08 95       	ret

000009e8 <TaskManager>:
     9e8:	f8 94       	cli
     9ea:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <__TM_TaskCnt>
     9ee:	88 23       	and	r24, r24
     9f0:	e1 f0       	breq	.+56     	; 0xa2a <TaskManager+0x42>
     9f2:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <__TM_Start>
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	ee 0f       	add	r30, r30
     9fa:	ff 1f       	adc	r31, r31
     9fc:	e2 5e       	subi	r30, 0xE2	; 226
     9fe:	fe 4f       	sbci	r31, 0xFE	; 254
     a00:	01 90       	ld	r0, Z+
     a02:	f0 81       	ld	r31, Z
     a04:	e0 2d       	mov	r30, r0
     a06:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__TM_Start>
     a0a:	8f 5f       	subi	r24, 0xFF	; 255
     a0c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TM_Start>
     a10:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__TM_Start>
     a14:	84 31       	cpi	r24, 0x14	; 20
     a16:	11 f4       	brne	.+4      	; 0xa1c <TaskManager+0x34>
     a18:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TM_Start>
     a1c:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <__TM_TaskCnt>
     a20:	81 50       	subi	r24, 0x01	; 1
     a22:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <__TM_TaskCnt>
     a26:	78 94       	sei
     a28:	09 95       	icall
     a2a:	78 94       	sei
     a2c:	08 95       	ret

00000a2e <__vector_9>:

//***************************************************************************
// Прерывание системного таймера
//***************************************************************************
ISR(__TS_ISR)
{
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	2f 93       	push	r18
     a42:	3f 93       	push	r19
     a44:	4f 93       	push	r20
     a46:	5f 93       	push	r21
     a48:	6f 93       	push	r22
     a4a:	7f 93       	push	r23
     a4c:	8f 93       	push	r24
     a4e:	9f 93       	push	r25
     a50:	af 93       	push	r26
     a52:	bf 93       	push	r27
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	ef 93       	push	r30
     a5a:	ff 93       	push	r31
	TCNT0 = __TS_Timer0_TCNTDefault;										// Сбрасываем значение счетчика
     a5c:	83 e8       	ldi	r24, 0x83	; 131
     a5e:	82 bf       	out	0x32, r24	; 50
     a60:	e1 2c       	mov	r14, r1
     a62:	f1 2c       	mov	r15, r1
			__TS_TimerTaskQueue[i].Time--;									// ...декрементируем ее временную задержку
		}
		else																// ...иначе, если пришло время выполнять задачу...
		{
			SendTask(__TS_TimerTaskQueue[i].Task);							// ...пхаем эту задачу в диспетчер задач
			__TS_TimerTaskQueue[i].Task = Idle;								// и пишем на ее место затычку.
     a64:	03 ef       	ldi	r16, 0xF3	; 243
     a66:	13 e0       	ldi	r17, 0x03	; 3
//***************************************************************************
inline void TimerService(void)
{
	for (uint8_t i = 0; i < __TS_TimerQueueSize; i++)						// Прочесываем очередь
	{
		if (__TS_TimerTaskQueue[i].Task == Idle) continue;					// Если натыкаемся на затычку - переходим к следующей ячейке.
     a68:	c7 01       	movw	r24, r14
     a6a:	f7 01       	movw	r30, r14
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	ee 51       	subi	r30, 0x1E	; 30
     a76:	ff 4f       	sbci	r31, 0xFF	; 255
     a78:	20 81       	ld	r18, Z
     a7a:	31 81       	ldd	r19, Z+1	; 0x01
     a7c:	23 5f       	subi	r18, 0xF3	; 243
     a7e:	33 40       	sbci	r19, 0x03	; 3
     a80:	21 f1       	breq	.+72     	; 0xaca <__vector_9+0x9c>
		if (__TS_TimerTaskQueue[i].Time != 0)								// Если натыкаемся на адекватную задачу и ее время еще не истекло...
     a82:	f7 01       	movw	r30, r14
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	ee 0f       	add	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	ee 51       	subi	r30, 0x1E	; 30
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	22 81       	ldd	r18, Z+2	; 0x02
     a92:	33 81       	ldd	r19, Z+3	; 0x03
     a94:	23 2b       	or	r18, r19
     a96:	69 f0       	breq	.+26     	; 0xab2 <__vector_9+0x84>
		{
			__TS_TimerTaskQueue[i].Time--;									// ...декрементируем ее временную задержку
     a98:	88 0f       	add	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	fc 01       	movw	r30, r24
     aa2:	ee 51       	subi	r30, 0x1E	; 30
     aa4:	ff 4f       	sbci	r31, 0xFF	; 255
     aa6:	82 81       	ldd	r24, Z+2	; 0x02
     aa8:	93 81       	ldd	r25, Z+3	; 0x03
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	93 83       	std	Z+3, r25	; 0x03
     aae:	82 83       	std	Z+2, r24	; 0x02
     ab0:	0c c0       	rjmp	.+24     	; 0xaca <__vector_9+0x9c>
		}
		else																// ...иначе, если пришло время выполнять задачу...
		{
			SendTask(__TS_TimerTaskQueue[i].Task);							// ...пхаем эту задачу в диспетчер задач
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	ec 01       	movw	r28, r24
     abc:	ce 51       	subi	r28, 0x1E	; 30
     abe:	df 4f       	sbci	r29, 0xFF	; 255
     ac0:	88 81       	ld	r24, Y
     ac2:	99 81       	ldd	r25, Y+1	; 0x01
     ac4:	b9 de       	rcall	.-654    	; 0x838 <SendTask>
			__TS_TimerTaskQueue[i].Task = Idle;								// и пишем на ее место затычку.
     ac6:	19 83       	std	Y+1, r17	; 0x01
     ac8:	08 83       	st	Y, r16
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	e8 1a       	sub	r14, r24
     ace:	f8 0a       	sbc	r15, r24
//***************************************************************************
// Запуск таймерной службы
//***************************************************************************
inline void TimerService(void)
{
	for (uint8_t i = 0; i < __TS_TimerQueueSize; i++)						// Прочесываем очередь
     ad0:	4f e0       	ldi	r20, 0x0F	; 15
     ad2:	e4 16       	cp	r14, r20
     ad4:	f1 04       	cpc	r15, r1
     ad6:	41 f6       	brne	.-112    	; 0xa68 <__vector_9+0x3a>
ISR(__TS_ISR)
{
	TCNT0 = __TS_Timer0_TCNTDefault;										// Сбрасываем значение счетчика
	
	TimerService();															// Вызываем таймерную службу
}
     ad8:	ff 91       	pop	r31
     ada:	ef 91       	pop	r30
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	bf 91       	pop	r27
     ae2:	af 91       	pop	r26
     ae4:	9f 91       	pop	r25
     ae6:	8f 91       	pop	r24
     ae8:	7f 91       	pop	r23
     aea:	6f 91       	pop	r22
     aec:	5f 91       	pop	r21
     aee:	4f 91       	pop	r20
     af0:	3f 91       	pop	r19
     af2:	2f 91       	pop	r18
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <PrintParameters>:



/*Объедени DisplayUpdate и PrintParameters*/
void PrintParameters(void)
{	
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
     b1a:	29 97       	sbiw	r28, 0x09	; 9
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
	char str[9];
	unsigned char i;
	
	if (DisplayN<50)
     b26:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <DisplayN>
     b2a:	12 33       	cpi	r17, 0x32	; 50
     b2c:	08 f0       	brcs	.+2      	; 0xb30 <PrintParameters+0x2a>
     b2e:	5d c0       	rjmp	.+186    	; 0xbea <PrintParameters+0xe4>
     b30:	0f 2e       	mov	r0, r31
     b32:	f3 e5       	ldi	r31, 0x53	; 83
     b34:	cf 2e       	mov	r12, r31
     b36:	f1 e0       	ldi	r31, 0x01	; 1
     b38:	df 2e       	mov	r13, r31
     b3a:	f0 2d       	mov	r31, r0
     b3c:	fe 01       	movw	r30, r28
     b3e:	33 96       	adiw	r30, 0x03	; 3
     b40:	be 01       	movw	r22, r28
     b42:	64 5f       	subi	r22, 0xF4	; 244
     b44:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		for (i = 0; i < 3; i++)
		{
			str[3*i] = Time[i]/10 + '0';
     b46:	0f 2e       	mov	r0, r31
     b48:	fd ec       	ldi	r31, 0xCD	; 205
     b4a:	ff 2e       	mov	r15, r31
     b4c:	f0 2d       	mov	r31, r0
			str[3*i+1] = Time[i]%10 + '0';
			str[3*i+2] = ':';
     b4e:	0a e3       	ldi	r16, 0x3A	; 58
	
	if (DisplayN<50)
	{
		for (i = 0; i < 3; i++)
		{
			str[3*i] = Time[i]/10 + '0';
     b50:	d6 01       	movw	r26, r12
     b52:	9d 91       	ld	r25, X+
     b54:	6d 01       	movw	r12, r26
     b56:	9f 01       	movw	r18, r30
     b58:	22 50       	subi	r18, 0x02	; 2
     b5a:	31 09       	sbc	r19, r1
     b5c:	9f 9d       	mul	r25, r15
     b5e:	81 2d       	mov	r24, r1
     b60:	11 24       	eor	r1, r1
     b62:	86 95       	lsr	r24
     b64:	86 95       	lsr	r24
     b66:	86 95       	lsr	r24
     b68:	40 e3       	ldi	r20, 0x30	; 48
     b6a:	48 0f       	add	r20, r24
     b6c:	d9 01       	movw	r26, r18
     b6e:	4c 93       	st	X, r20
     b70:	af 01       	movw	r20, r30
     b72:	41 50       	subi	r20, 0x01	; 1
     b74:	51 09       	sbc	r21, r1
			str[3*i+1] = Time[i]%10 + '0';
     b76:	88 0f       	add	r24, r24
     b78:	28 2f       	mov	r18, r24
     b7a:	22 0f       	add	r18, r18
     b7c:	22 0f       	add	r18, r18
     b7e:	82 0f       	add	r24, r18
     b80:	98 1b       	sub	r25, r24
     b82:	90 5d       	subi	r25, 0xD0	; 208
     b84:	da 01       	movw	r26, r20
     b86:	9c 93       	st	X, r25
			str[3*i+2] = ':';
     b88:	00 83       	st	Z, r16
     b8a:	33 96       	adiw	r30, 0x03	; 3
	char str[9];
	unsigned char i;
	
	if (DisplayN<50)
	{
		for (i = 0; i < 3; i++)
     b8c:	e6 17       	cp	r30, r22
     b8e:	f7 07       	cpc	r31, r23
     b90:	f9 f6       	brne	.-66     	; 0xb50 <PrintParameters+0x4a>
		{
			str[3*i] = Time[i]/10 + '0';
			str[3*i+1] = Time[i]%10 + '0';
			str[3*i+2] = ':';
		}
		str[8] = 0;
     b92:	19 86       	std	Y+9, r1	; 0x09
		
		if ((DisplayN%10) && (RSeg))
     b94:	8d ec       	ldi	r24, 0xCD	; 205
     b96:	18 9f       	mul	r17, r24
     b98:	81 2d       	mov	r24, r1
     b9a:	11 24       	eor	r1, r1
     b9c:	86 95       	lsr	r24
     b9e:	86 95       	lsr	r24
     ba0:	86 95       	lsr	r24
     ba2:	88 0f       	add	r24, r24
     ba4:	98 2f       	mov	r25, r24
     ba6:	99 0f       	add	r25, r25
     ba8:	99 0f       	add	r25, r25
     baa:	89 0f       	add	r24, r25
     bac:	18 1b       	sub	r17, r24
     bae:	b9 f0       	breq	.+46     	; 0xbde <PrintParameters+0xd8>
     bb0:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <RSeg>
     bb4:	99 23       	and	r25, r25
     bb6:	99 f0       	breq	.+38     	; 0xbde <PrintParameters+0xd8>
		{
			str[9 - (DisplayN%10)*3] = ' ';
     bb8:	81 2f       	mov	r24, r17
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	9c 01       	movw	r18, r24
     bbe:	22 0f       	add	r18, r18
     bc0:	33 1f       	adc	r19, r19
     bc2:	82 0f       	add	r24, r18
     bc4:	93 1f       	adc	r25, r19
     bc6:	91 95       	neg	r25
     bc8:	81 95       	neg	r24
     bca:	91 09       	sbc	r25, r1
     bcc:	fe 01       	movw	r30, r28
     bce:	e8 0f       	add	r30, r24
     bd0:	f9 1f       	adc	r31, r25
     bd2:	20 e2       	ldi	r18, 0x20	; 32
     bd4:	22 87       	std	Z+10, r18	; 0x0a
			str[10 - (DisplayN%10)*3] = ' ';
     bd6:	fe 01       	movw	r30, r28
     bd8:	e8 0f       	add	r30, r24
     bda:	f9 1f       	adc	r31, r25
     bdc:	23 87       	std	Z+11, r18	; 0x0b
		}
		LCD5110_LargeNumPrints(str, 10, 3);		
     bde:	43 e0       	ldi	r20, 0x03	; 3
     be0:	6a e0       	ldi	r22, 0x0A	; 10
     be2:	ce 01       	movw	r24, r28
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	63 dd       	rcall	.-1338   	; 0x6ae <LCD5110_LargeNumPrints>
     be8:	87 c0       	rjmp	.+270    	; 0xcf8 <PrintParameters+0x1f2>
     bea:	01 e0       	ldi	r16, 0x01	; 1
     bec:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
	{
		for (unsigned char NumPar = 0; NumPar < 2; NumPar++)
		{
			if ((DisplayN%10 != (NumPar+1))||(RSeg != 1))
     bee:	0f 2e       	mov	r0, r31
     bf0:	fd ec       	ldi	r31, 0xCD	; 205
     bf2:	ff 2e       	mov	r15, r31
     bf4:	f0 2d       	mov	r31, r0
			{
				str[0] = (Settings[NumPar] / 100) + '0';
     bf6:	0f 2e       	mov	r0, r31
     bf8:	f9 e2       	ldi	r31, 0x29	; 41
     bfa:	df 2e       	mov	r13, r31
     bfc:	f0 2d       	mov	r31, r0
				str[3] = 0;
					
				i = 0;
				while ((i < 2)&&(str[i] == '0'))
				{
					str[i] = ' ';
     bfe:	68 94       	set
     c00:	ee 24       	eor	r14, r14
     c02:	e5 f8       	bld	r14, 5
	}
	else
	{
		for (unsigned char NumPar = 0; NumPar < 2; NumPar++)
		{
			if ((DisplayN%10 != (NumPar+1))||(RSeg != 1))
     c04:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <DisplayN>
     c08:	8f 9d       	mul	r24, r15
     c0a:	91 2d       	mov	r25, r1
     c0c:	11 24       	eor	r1, r1
     c0e:	96 95       	lsr	r25
     c10:	96 95       	lsr	r25
     c12:	96 95       	lsr	r25
     c14:	99 0f       	add	r25, r25
     c16:	29 2f       	mov	r18, r25
     c18:	22 0f       	add	r18, r18
     c1a:	22 0f       	add	r18, r18
     c1c:	92 0f       	add	r25, r18
     c1e:	89 1b       	sub	r24, r25
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	80 17       	cp	r24, r16
     c24:	91 07       	cpc	r25, r17
     c26:	21 f4       	brne	.+8      	; 0xc30 <PrintParameters+0x12a>
     c28:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <RSeg>
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	a9 f1       	breq	.+106    	; 0xc9a <PrintParameters+0x194>
     c30:	f8 01       	movw	r30, r16
     c32:	e1 5b       	subi	r30, 0xB1	; 177
     c34:	fe 4f       	sbci	r31, 0xFE	; 254
			{
				str[0] = (Settings[NumPar] / 100) + '0';
     c36:	90 81       	ld	r25, Z
     c38:	9d 9d       	mul	r25, r13
     c3a:	21 2d       	mov	r18, r1
     c3c:	11 24       	eor	r1, r1
     c3e:	22 95       	swap	r18
     c40:	2f 70       	andi	r18, 0x0F	; 15
     c42:	20 5d       	subi	r18, 0xD0	; 208
     c44:	29 83       	std	Y+1, r18	; 0x01
				str[1] = ((Settings[NumPar] / 10) % 10)  + '0';
     c46:	9f 9d       	mul	r25, r15
     c48:	81 2d       	mov	r24, r1
     c4a:	11 24       	eor	r1, r1
     c4c:	86 95       	lsr	r24
     c4e:	86 95       	lsr	r24
     c50:	86 95       	lsr	r24
     c52:	8f 9d       	mul	r24, r15
     c54:	31 2d       	mov	r19, r1
     c56:	11 24       	eor	r1, r1
     c58:	36 95       	lsr	r19
     c5a:	36 95       	lsr	r19
     c5c:	36 95       	lsr	r19
     c5e:	33 0f       	add	r19, r19
     c60:	43 2f       	mov	r20, r19
     c62:	44 0f       	add	r20, r20
     c64:	44 0f       	add	r20, r20
     c66:	34 0f       	add	r19, r20
     c68:	b8 2f       	mov	r27, r24
     c6a:	b3 1b       	sub	r27, r19
     c6c:	3b 2f       	mov	r19, r27
     c6e:	30 5d       	subi	r19, 0xD0	; 208
     c70:	3a 83       	std	Y+2, r19	; 0x02
				str[2] = (Settings[NumPar] % 10)  + '0';
     c72:	88 0f       	add	r24, r24
     c74:	38 2f       	mov	r19, r24
     c76:	33 0f       	add	r19, r19
     c78:	33 0f       	add	r19, r19
     c7a:	83 0f       	add	r24, r19
     c7c:	98 1b       	sub	r25, r24
     c7e:	90 5d       	subi	r25, 0xD0	; 208
     c80:	9b 83       	std	Y+3, r25	; 0x03
				str[3] = 0;
     c82:	1c 82       	std	Y+4, r1	; 0x04
					
				i = 0;
				while ((i < 2)&&(str[i] == '0'))
     c84:	20 33       	cpi	r18, 0x30	; 48
     c86:	99 f1       	breq	.+102    	; 0xcee <PrintParameters+0x1e8>
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <PrintParameters+0x186>
				{
					str[i] = ' ';
     c8a:	ea 82       	std	Y+2, r14	; 0x02
     c8c:	42 e0       	ldi	r20, 0x02	; 2
     c8e:	40 0f       	add	r20, r16
					i++;
				}
				LCD5110_Prints(str, 9*6, 3 + NumPar);
     c90:	66 e3       	ldi	r22, 0x36	; 54
     c92:	ce 01       	movw	r24, r28
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	53 dc       	rcall	.-1882   	; 0x53e <LCD5110_Prints>
     c98:	06 c0       	rjmp	.+12     	; 0xca6 <PrintParameters+0x1a0>
     c9a:	42 e0       	ldi	r20, 0x02	; 2
     c9c:	40 0f       	add	r20, r16
			}
			else
			{
				LCD5110_Prints("   ", 9*6, 3 + NumPar);
     c9e:	66 e3       	ldi	r22, 0x36	; 54
     ca0:	8e e6       	ldi	r24, 0x6E	; 110
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	4c dc       	rcall	.-1896   	; 0x53e <LCD5110_Prints>
     ca6:	0f 5f       	subi	r16, 0xFF	; 255
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		LCD5110_LargeNumPrints(str, 10, 3);		
	}
	else
	{
		for (unsigned char NumPar = 0; NumPar < 2; NumPar++)
     caa:	03 30       	cpi	r16, 0x03	; 3
     cac:	11 05       	cpc	r17, r1
     cae:	09 f0       	breq	.+2      	; 0xcb2 <PrintParameters+0x1ac>
     cb0:	a9 cf       	rjmp	.-174    	; 0xc04 <PrintParameters+0xfe>
			}
			
		}			
		
		// Вывод параметров звука	
		if ((DisplayN != 53)||(RSeg != 1))
     cb2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <DisplayN>
     cb6:	85 33       	cpi	r24, 0x35	; 53
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <PrintParameters+0x1bc>
     cba:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <RSeg>
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	81 f0       	breq	.+32     	; 0xce2 <PrintParameters+0x1dc>
		{
			if (Settings[2])
     cc2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <Settings+0x2>
     cc6:	88 23       	and	r24, r24
     cc8:	31 f0       	breq	.+12     	; 0xcd6 <PrintParameters+0x1d0>
				LCD5110_Prints(" Вкл.", 9*6, 5);
     cca:	45 e0       	ldi	r20, 0x05	; 5
     ccc:	66 e3       	ldi	r22, 0x36	; 54
     cce:	80 e6       	ldi	r24, 0x60	; 96
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	35 dc       	rcall	.-1942   	; 0x53e <LCD5110_Prints>
     cd4:	11 c0       	rjmp	.+34     	; 0xcf8 <PrintParameters+0x1f2>
			else
				LCD5110_Prints("Выкл.", 9*6, 5);
     cd6:	45 e0       	ldi	r20, 0x05	; 5
     cd8:	66 e3       	ldi	r22, 0x36	; 54
     cda:	86 e6       	ldi	r24, 0x66	; 102
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	2f dc       	rcall	.-1954   	; 0x53e <LCD5110_Prints>
     ce0:	0b c0       	rjmp	.+22     	; 0xcf8 <PrintParameters+0x1f2>
		}
		else
		{
			LCD5110_Prints("     ", 9*6, 5);
     ce2:	45 e0       	ldi	r20, 0x05	; 5
     ce4:	66 e3       	ldi	r22, 0x36	; 54
     ce6:	8c e6       	ldi	r24, 0x6C	; 108
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	29 dc       	rcall	.-1966   	; 0x53e <LCD5110_Prints>
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <PrintParameters+0x1f2>
				str[3] = 0;
					
				i = 0;
				while ((i < 2)&&(str[i] == '0'))
				{
					str[i] = ' ';
     cee:	e9 82       	std	Y+1, r14	; 0x01
				str[1] = ((Settings[NumPar] / 10) % 10)  + '0';
				str[2] = (Settings[NumPar] % 10)  + '0';
				str[3] = 0;
					
				i = 0;
				while ((i < 2)&&(str[i] == '0'))
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	80 33       	cpi	r24, 0x30	; 48
     cf4:	51 f2       	breq	.-108    	; 0xc8a <PrintParameters+0x184>
     cf6:	ca cf       	rjmp	.-108    	; 0xc8c <PrintParameters+0x186>
		else
		{
			LCD5110_Prints("     ", 9*6, 5);
		}
	}
}
     cf8:	29 96       	adiw	r28, 0x09	; 9
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	df 90       	pop	r13
     d12:	cf 90       	pop	r12
     d14:	08 95       	ret

00000d16 <DisplayUpdate>:
}



void DisplayUpdate(void)
{
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
	LCD5110_SetXY(0, 3);
     d1a:	63 e0       	ldi	r22, 0x03	; 3
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	dc db       	rcall	.-2120   	; 0x4d8 <LCD5110_SetXY>
     d20:	cc ef       	ldi	r28, 0xFC	; 252
     d22:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned int i = 0; i < 84*3; i++)
		LCD5110_SendByte(0, 1);
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	88 db       	rcall	.-2288   	; 0x43a <LCD5110_SendByte>
     d2a:	21 97       	sbiw	r28, 0x01	; 1


void DisplayUpdate(void)
{
	LCD5110_SetXY(0, 3);
	for (unsigned int i = 0; i < 84*3; i++)
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <DisplayUpdate+0xe>
		LCD5110_SendByte(0, 1);
		
	switch (DisplayN/10)
     d2e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <DisplayN>
     d32:	9d ec       	ldi	r25, 0xCD	; 205
     d34:	89 9f       	mul	r24, r25
     d36:	81 2d       	mov	r24, r1
     d38:	11 24       	eor	r1, r1
     d3a:	86 95       	lsr	r24
     d3c:	86 95       	lsr	r24
     d3e:	86 95       	lsr	r24
     d40:	82 30       	cpi	r24, 0x02	; 2
     d42:	a1 f0       	breq	.+40     	; 0xd6c <DisplayUpdate+0x56>
     d44:	28 f4       	brcc	.+10     	; 0xd50 <DisplayUpdate+0x3a>
     d46:	88 23       	and	r24, r24
     d48:	49 f0       	breq	.+18     	; 0xd5c <DisplayUpdate+0x46>
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	59 f0       	breq	.+22     	; 0xd64 <DisplayUpdate+0x4e>
     d4e:	2c c0       	rjmp	.+88     	; 0xda8 <DisplayUpdate+0x92>
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	a1 f0       	breq	.+40     	; 0xd7c <DisplayUpdate+0x66>
     d54:	78 f0       	brcs	.+30     	; 0xd74 <DisplayUpdate+0x5e>
     d56:	85 30       	cpi	r24, 0x05	; 5
     d58:	a9 f0       	breq	.+42     	; 0xd84 <DisplayUpdate+0x6e>
     d5a:	26 c0       	rjmp	.+76     	; 0xda8 <DisplayUpdate+0x92>
	{
		case 0:
		{
			HeaderPrints("<Режим #1>");
     d5c:	82 e7       	ldi	r24, 0x72	; 114
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	ff db       	rcall	.-2050   	; 0x560 <HeaderPrints>
			break;
     d62:	22 c0       	rjmp	.+68     	; 0xda8 <DisplayUpdate+0x92>
		}
		case 1:
		{
			HeaderPrints("<Режим #2>");
     d64:	8d e7       	ldi	r24, 0x7D	; 125
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	fb db       	rcall	.-2058   	; 0x560 <HeaderPrints>
			break;
     d6a:	1e c0       	rjmp	.+60     	; 0xda8 <DisplayUpdate+0x92>
		}
		case 2:
		{
			HeaderPrints("<Режим #3>");
     d6c:	88 e8       	ldi	r24, 0x88	; 136
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	f7 db       	rcall	.-2066   	; 0x560 <HeaderPrints>
			break;
     d72:	1a c0       	rjmp	.+52     	; 0xda8 <DisplayUpdate+0x92>
		}
		case 3:
		{
			HeaderPrints("<Режим #4>");
     d74:	83 e9       	ldi	r24, 0x93	; 147
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	f3 db       	rcall	.-2074   	; 0x560 <HeaderPrints>
			break;
     d7a:	16 c0       	rjmp	.+44     	; 0xda8 <DisplayUpdate+0x92>
		}
		case 4:
		{
			HeaderPrints("<Режим #5>");
     d7c:	8e e9       	ldi	r24, 0x9E	; 158
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	ef db       	rcall	.-2082   	; 0x560 <HeaderPrints>
			break;
     d82:	12 c0       	rjmp	.+36     	; 0xda8 <DisplayUpdate+0x92>
		}
		case 5:
		{
			HeaderPrints("<Настройки>");
     d84:	89 ea       	ldi	r24, 0xA9	; 169
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	eb db       	rcall	.-2090   	; 0x560 <HeaderPrints>
			LCD5110_Prints("Задержка     с", 0, 3);
     d8a:	43 e0       	ldi	r20, 0x03	; 3
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	85 eb       	ldi	r24, 0xB5	; 181
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	d5 db       	rcall	.-2134   	; 0x53e <LCD5110_Prints>
			LCD5110_Prints("Яркость      %", 0, 4);
     d94:	44 e0       	ldi	r20, 0x04	; 4
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	84 ec       	ldi	r24, 0xC4	; 196
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	d0 db       	rcall	.-2144   	; 0x53e <LCD5110_Prints>
			LCD5110_Prints("Звук", 0, 5);
     d9e:	45 e0       	ldi	r20, 0x05	; 5
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	83 ed       	ldi	r24, 0xD3	; 211
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	cb db       	rcall	.-2154   	; 0x53e <LCD5110_Prints>
			break;
		}
	}
	
	PrintParameters();
     da8:	ae de       	rcall	.-676    	; 0xb06 <PrintParameters>
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <MirrorDigit>:
}


void MirrorDigit(void)
{
	RSeg ^= (1<<0);
     db0:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <RSeg>
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	89 27       	eor	r24, r25
     db8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <RSeg>
	SendTask(PrintParameters);
     dbc:	83 e8       	ldi	r24, 0x83	; 131
     dbe:	95 e0       	ldi	r25, 0x05	; 5
     dc0:	3b dd       	rcall	.-1418   	; 0x838 <SendTask>
	SendTimerTask(MirrorDigit, 500);
     dc2:	64 ef       	ldi	r22, 0xF4	; 244
     dc4:	71 e0       	ldi	r23, 0x01	; 1
     dc6:	88 ed       	ldi	r24, 0xD8	; 216
     dc8:	96 e0       	ldi	r25, 0x06	; 6
     dca:	87 dd       	rcall	.-1266   	; 0x8da <SendTimerTask>
     dcc:	08 95       	ret

00000dce <main>:
void MirrorDigit(void);


int main(void)
{
	TimerDDR |= (1<<TimerNPin);
     dce:	b8 9a       	sbi	0x17, 0	; 23
	TimerPort &= ~(1<<TimerNPin);
     dd0:	c0 98       	cbi	0x18, 0	; 24
	RTOS_Init();
     dd2:	0a dd       	rcall	.-1516   	; 0x7e8 <RTOS_Init>
	RTOS_Run();
     dd4:	23 dd       	rcall	.-1466   	; 0x81c <RTOS_Run>
     dd6:	00 e0       	ldi	r16, 0x00	; 0
     dd8:	10 e0       	ldi	r17, 0x00	; 0
     dda:	c0 e5       	ldi	r28, 0x50	; 80
     ddc:	d1 e0       	ldi	r29, 0x01	; 1
     dde:	0f 2e       	mov	r0, r31
     de0:	f3 e5       	ldi	r31, 0x53	; 83
     de2:	ef 2e       	mov	r14, r31
     de4:	f1 e0       	ldi	r31, 0x01	; 1
     de6:	ff 2e       	mov	r15, r31
     de8:	f0 2d       	mov	r31, r0

inline void ReadSettings(void)
{
	for (unsigned char i=0; i<3; i++)
	{
		Settings[i] = eeprom_read_byte(&EE_TimerSettings[i]);
     dea:	c8 01       	movw	r24, r16
     dec:	b0 d2       	rcall	.+1376   	; 0x134e <eeprom_read_byte>
     dee:	89 93       	st	Y+, r24
     df0:	0f 5f       	subi	r16, 0xFF	; 255
     df2:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

inline void ReadSettings(void)
{
	for (unsigned char i=0; i<3; i++)
     df4:	ce 15       	cp	r28, r14
     df6:	df 05       	cpc	r29, r15
     df8:	c1 f7       	brne	.-16     	; 0xdea <main+0x1c>
/*Считывание и запись параметров таймера*/
inline void ReadTime(void)
{
	for (unsigned char i=0; i<3; i++)
	{
		Time[i] = eeprom_read_byte(&EE_TimeModes[DisplayN/10][i]);
     dfa:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <DisplayN>
     dfe:	9d ec       	ldi	r25, 0xCD	; 205
     e00:	89 9f       	mul	r24, r25
     e02:	81 2d       	mov	r24, r1
     e04:	11 24       	eor	r1, r1
     e06:	86 95       	lsr	r24
     e08:	86 95       	lsr	r24
     e0a:	86 95       	lsr	r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	ec 01       	movw	r28, r24
     e10:	cc 0f       	add	r28, r28
     e12:	dd 1f       	adc	r29, r29
     e14:	8c 0f       	add	r24, r28
     e16:	9d 1f       	adc	r25, r29
     e18:	ec 01       	movw	r28, r24
     e1a:	cd 5f       	subi	r28, 0xFD	; 253
     e1c:	df 4f       	sbci	r29, 0xFF	; 255
     e1e:	03 e5       	ldi	r16, 0x53	; 83
     e20:	11 e0       	ldi	r17, 0x01	; 1
     e22:	0f 2e       	mov	r0, r31
     e24:	f6 e5       	ldi	r31, 0x56	; 86
     e26:	ef 2e       	mov	r14, r31
     e28:	f1 e0       	ldi	r31, 0x01	; 1
     e2a:	ff 2e       	mov	r15, r31
     e2c:	f0 2d       	mov	r31, r0
     e2e:	ce 01       	movw	r24, r28
     e30:	8e d2       	rcall	.+1308   	; 0x134e <eeprom_read_byte>
     e32:	f8 01       	movw	r30, r16
     e34:	81 93       	st	Z+, r24
     e36:	8f 01       	movw	r16, r30
     e38:	21 96       	adiw	r28, 0x01	; 1
}

/*Считывание и запись параметров таймера*/
inline void ReadTime(void)
{
	for (unsigned char i=0; i<3; i++)
     e3a:	ee 15       	cp	r30, r14
     e3c:	ff 05       	cpc	r31, r15
     e3e:	b9 f7       	brne	.-18     	; 0xe2e <main+0x60>
	RTOS_Run();
	
	ReadSettings();
	ReadTime();
	
	ENC_Init();
     e40:	c2 dc       	rcall	.-1660   	; 0x7c6 <ENC_Init>
	
	LCD5110_Init();
     e42:	22 db       	rcall	.-2492   	; 0x488 <LCD5110_Init>
	LCD5110_Clear();
     e44:	0f db       	rcall	.-2530   	; 0x464 <LCD5110_Clear>
	DisplayUpdate();
     e46:	67 df       	rcall	.-306    	; 0xd16 <DisplayUpdate>
    while (1)
    {
		TaskManager();
     e48:	cf dd       	rcall	.-1122   	; 0x9e8 <TaskManager>
	}
     e4a:	fe cf       	rjmp	.-4      	; 0xe48 <main+0x7a>

00000e4c <ENC_Inc>:

//***************************************************************************
// Энкодер вращается по часовой стрелке
//***************************************************************************
void ENC_Inc(void)
{
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
//Здесь может быть ваш код ;)
	if (TimerState == 0)
     e58:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <TimerState>
     e5c:	81 11       	cpse	r24, r1
     e5e:	85 c0       	rjmp	.+266    	; 0xf6a <ENC_Inc+0x11e>
	{
		if (DisplayN%10 == 0)
     e60:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <DisplayN>
     e64:	cd ec       	ldi	r28, 0xCD	; 205
     e66:	8c 9f       	mul	r24, r28
     e68:	c1 2d       	mov	r28, r1
     e6a:	11 24       	eor	r1, r1
     e6c:	c6 95       	lsr	r28
     e6e:	c6 95       	lsr	r28
     e70:	c6 95       	lsr	r28
     e72:	cc 0f       	add	r28, r28
     e74:	9c 2f       	mov	r25, r28
     e76:	99 0f       	add	r25, r25
     e78:	99 0f       	add	r25, r25
     e7a:	c9 0f       	add	r28, r25
     e7c:	98 2f       	mov	r25, r24
     e7e:	9c 1b       	sub	r25, r28
     e80:	c9 2f       	mov	r28, r25
     e82:	79 f5       	brne	.+94     	; 0xee2 <ENC_Inc+0x96>
		{
			if (DisplayN == 50)
     e84:	82 33       	cpi	r24, 0x32	; 50
     e86:	19 f4       	brne	.+6      	; 0xe8e <ENC_Inc+0x42>
				DisplayN = 0;	
     e88:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <DisplayN>
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <ENC_Inc+0x4e>
			else
				DisplayN += 10;
     e8e:	ca e0       	ldi	r28, 0x0A	; 10
     e90:	c8 0f       	add	r28, r24
     e92:	c0 93 47 01 	sts	0x0147, r28	; 0x800147 <DisplayN>
			if (DisplayN != 50)
     e96:	c2 33       	cpi	r28, 0x32	; 50
     e98:	01 f1       	breq	.+64     	; 0xeda <ENC_Inc+0x8e>
/*Считывание и запись параметров таймера*/
inline void ReadTime(void)
{
	for (unsigned char i=0; i<3; i++)
	{
		Time[i] = eeprom_read_byte(&EE_TimeModes[DisplayN/10][i]);
     e9a:	8d ec       	ldi	r24, 0xCD	; 205
     e9c:	c8 9f       	mul	r28, r24
     e9e:	c1 2d       	mov	r28, r1
     ea0:	11 24       	eor	r1, r1
     ea2:	c6 95       	lsr	r28
     ea4:	c6 95       	lsr	r28
     ea6:	c6 95       	lsr	r28
     ea8:	d0 e0       	ldi	r29, 0x00	; 0
     eaa:	ce 01       	movw	r24, r28
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	c8 0f       	add	r28, r24
     eb2:	d9 1f       	adc	r29, r25
     eb4:	cd 5f       	subi	r28, 0xFD	; 253
     eb6:	df 4f       	sbci	r29, 0xFF	; 255
     eb8:	03 e5       	ldi	r16, 0x53	; 83
     eba:	11 e0       	ldi	r17, 0x01	; 1
     ebc:	0f 2e       	mov	r0, r31
     ebe:	f6 e5       	ldi	r31, 0x56	; 86
     ec0:	ef 2e       	mov	r14, r31
     ec2:	f1 e0       	ldi	r31, 0x01	; 1
     ec4:	ff 2e       	mov	r15, r31
     ec6:	f0 2d       	mov	r31, r0
     ec8:	ce 01       	movw	r24, r28
     eca:	41 d2       	rcall	.+1154   	; 0x134e <eeprom_read_byte>
     ecc:	f8 01       	movw	r30, r16
     ece:	81 93       	st	Z+, r24
     ed0:	8f 01       	movw	r16, r30
     ed2:	21 96       	adiw	r28, 0x01	; 1
}

/*Считывание и запись параметров таймера*/
inline void ReadTime(void)
{
	for (unsigned char i=0; i<3; i++)
     ed4:	ee 15       	cp	r30, r14
     ed6:	ff 05       	cpc	r31, r15
     ed8:	b9 f7       	brne	.-18     	; 0xec8 <ENC_Inc+0x7c>
				DisplayN += 10;
			if (DisplayN != 50)
			{
				ReadTime();
			}
			SendTask(DisplayUpdate);
     eda:	8b e8       	ldi	r24, 0x8B	; 139
     edc:	96 e0       	ldi	r25, 0x06	; 6
     ede:	ac dc       	rcall	.-1704   	; 0x838 <SendTask>
     ee0:	44 c0       	rjmp	.+136    	; 0xf6a <ENC_Inc+0x11e>
		}
		else
		{
			unsigned char i = DisplayN%10 - 1;
		
			if (DisplayN < 50)
     ee2:	82 33       	cpi	r24, 0x32	; 50
     ee4:	d0 f4       	brcc	.+52     	; 0xf1a <ENC_Inc+0xce>
			{
				i = 2-i;
     ee6:	93 e0       	ldi	r25, 0x03	; 3
     ee8:	9c 1b       	sub	r25, r28
				Time[i]++;
     eea:	29 2f       	mov	r18, r25
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	f9 01       	movw	r30, r18
     ef0:	ed 5a       	subi	r30, 0xAD	; 173
     ef2:	fe 4f       	sbci	r31, 0xFE	; 254
     ef4:	80 81       	ld	r24, Z
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	80 83       	st	Z, r24
				if (i != 0) 
     efa:	99 23       	and	r25, r25
     efc:	39 f0       	breq	.+14     	; 0xf0c <ENC_Inc+0xc0>
				{
					if (Time[i] == 60)
     efe:	8c 33       	cpi	r24, 0x3C	; 60
     f00:	51 f5       	brne	.+84     	; 0xf56 <ENC_Inc+0x10a>
						Time[i] = 0;
     f02:	f9 01       	movw	r30, r18
     f04:	ed 5a       	subi	r30, 0xAD	; 173
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	10 82       	st	Z, r1
     f0a:	25 c0       	rjmp	.+74     	; 0xf56 <ENC_Inc+0x10a>
				}
				else
				{
					if (Time[i] == 100)
     f0c:	84 36       	cpi	r24, 0x64	; 100
     f0e:	19 f5       	brne	.+70     	; 0xf56 <ENC_Inc+0x10a>
						Time[i] = 0;
     f10:	f9 01       	movw	r30, r18
     f12:	ed 5a       	subi	r30, 0xAD	; 173
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	10 82       	st	Z, r1
     f18:	1e c0       	rjmp	.+60     	; 0xf56 <ENC_Inc+0x10a>
			}
			SendTask(DisplayUpdate);
		}
		else
		{
			unsigned char i = DisplayN%10 - 1;
     f1a:	c1 50       	subi	r28, 0x01	; 1
						Time[i] = 0;
				}
			} 
			else
			{
				switch (i)
     f1c:	c1 30       	cpi	r28, 0x01	; 1
     f1e:	51 f0       	breq	.+20     	; 0xf34 <ENC_Inc+0xe8>
     f20:	18 f0       	brcs	.+6      	; 0xf28 <ENC_Inc+0xdc>
     f22:	c2 30       	cpi	r28, 0x02	; 2
     f24:	91 f0       	breq	.+36     	; 0xf4a <ENC_Inc+0xfe>
     f26:	17 c0       	rjmp	.+46     	; 0xf56 <ENC_Inc+0x10a>
				{
					case 0:
					{
						Settings[0]++;
     f28:	e0 e5       	ldi	r30, 0x50	; 80
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	80 83       	st	Z, r24
						break;
     f32:	11 c0       	rjmp	.+34     	; 0xf56 <ENC_Inc+0x10a>
					}
					case 1:
					{
						Settings[1] += 10;
     f34:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <Settings+0x1>
     f38:	86 5f       	subi	r24, 0xF6	; 246
						if (Settings[1] > 100)
     f3a:	85 36       	cpi	r24, 0x65	; 101
     f3c:	18 f4       	brcc	.+6      	; 0xf44 <ENC_Inc+0xf8>
						Settings[0]++;
						break;
					}
					case 1:
					{
						Settings[1] += 10;
     f3e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <Settings+0x1>
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <ENC_Inc+0x10a>
						if (Settings[1] > 100)
							Settings[1] = 0;
     f44:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <Settings+0x1>
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <ENC_Inc+0x10a>
					 
						break;
					}
					case 2:
					{
						Settings[2] ^= (1<<0);
     f4a:	e0 e5       	ldi	r30, 0x50	; 80
     f4c:	f1 e0       	ldi	r31, 0x01	; 1
     f4e:	92 81       	ldd	r25, Z+2	; 0x02
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	89 27       	eor	r24, r25
     f54:	82 83       	std	Z+2, r24	; 0x02
						break;
					}
				}
			}
			RSeg = 0;
     f56:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <RSeg>
			UpdateTimerTask(MirrorDigit, 500);
     f5a:	64 ef       	ldi	r22, 0xF4	; 244
     f5c:	71 e0       	ldi	r23, 0x01	; 1
     f5e:	88 ed       	ldi	r24, 0xD8	; 216
     f60:	96 e0       	ldi	r25, 0x06	; 6
     f62:	ed dc       	rcall	.-1574   	; 0x93e <UpdateTimerTask>
		
			SendTask(PrintParameters);
     f64:	83 e8       	ldi	r24, 0x83	; 131
     f66:	95 e0       	ldi	r25, 0x05	; 5
     f68:	67 dc       	rcall	.-1842   	; 0x838 <SendTask>
		}
	}
}
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	08 95       	ret

00000f78 <ENC_Dec>:

//***************************************************************************
// Энкодер вращается против часовой стрелки
//***************************************************************************
void ENC_Dec(void)
{
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
//Здесь может быть ваш код ;)
	if(TimerState == 0)
     f84:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <TimerState>
     f88:	81 11       	cpse	r24, r1
     f8a:	89 c0       	rjmp	.+274    	; 0x109e <ENC_Dec+0x126>
	{
		if (DisplayN%10 == 0)
     f8c:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <DisplayN>
     f90:	8d ec       	ldi	r24, 0xCD	; 205
     f92:	c8 9f       	mul	r28, r24
     f94:	81 2d       	mov	r24, r1
     f96:	11 24       	eor	r1, r1
     f98:	86 95       	lsr	r24
     f9a:	86 95       	lsr	r24
     f9c:	86 95       	lsr	r24
     f9e:	88 0f       	add	r24, r24
     fa0:	98 2f       	mov	r25, r24
     fa2:	99 0f       	add	r25, r25
     fa4:	99 0f       	add	r25, r25
     fa6:	89 0f       	add	r24, r25
     fa8:	9c 2f       	mov	r25, r28
     faa:	98 1b       	sub	r25, r24
     fac:	89 2f       	mov	r24, r25
     fae:	79 f5       	brne	.+94     	; 0x100e <ENC_Dec+0x96>
		{
			if (DisplayN == 0)
     fb0:	c1 11       	cpse	r28, r1
     fb2:	04 c0       	rjmp	.+8      	; 0xfbc <ENC_Dec+0x44>
				DisplayN = 50;
     fb4:	82 e3       	ldi	r24, 0x32	; 50
     fb6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <DisplayN>
     fba:	25 c0       	rjmp	.+74     	; 0x1006 <ENC_Dec+0x8e>
			else
				DisplayN -= 10;
     fbc:	ca 50       	subi	r28, 0x0A	; 10
     fbe:	c0 93 47 01 	sts	0x0147, r28	; 0x800147 <DisplayN>
			
			if (DisplayN != 50)
     fc2:	c2 33       	cpi	r28, 0x32	; 50
     fc4:	01 f1       	breq	.+64     	; 0x1006 <ENC_Dec+0x8e>
/*Считывание и запись параметров таймера*/
inline void ReadTime(void)
{
	for (unsigned char i=0; i<3; i++)
	{
		Time[i] = eeprom_read_byte(&EE_TimeModes[DisplayN/10][i]);
     fc6:	8d ec       	ldi	r24, 0xCD	; 205
     fc8:	c8 9f       	mul	r28, r24
     fca:	c1 2d       	mov	r28, r1
     fcc:	11 24       	eor	r1, r1
     fce:	c6 95       	lsr	r28
     fd0:	c6 95       	lsr	r28
     fd2:	c6 95       	lsr	r28
     fd4:	d0 e0       	ldi	r29, 0x00	; 0
     fd6:	ce 01       	movw	r24, r28
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	c8 0f       	add	r28, r24
     fde:	d9 1f       	adc	r29, r25
     fe0:	cd 5f       	subi	r28, 0xFD	; 253
     fe2:	df 4f       	sbci	r29, 0xFF	; 255
     fe4:	03 e5       	ldi	r16, 0x53	; 83
     fe6:	11 e0       	ldi	r17, 0x01	; 1
     fe8:	0f 2e       	mov	r0, r31
     fea:	f6 e5       	ldi	r31, 0x56	; 86
     fec:	ef 2e       	mov	r14, r31
     fee:	f1 e0       	ldi	r31, 0x01	; 1
     ff0:	ff 2e       	mov	r15, r31
     ff2:	f0 2d       	mov	r31, r0
     ff4:	ce 01       	movw	r24, r28
     ff6:	ab d1       	rcall	.+854    	; 0x134e <eeprom_read_byte>
     ff8:	f8 01       	movw	r30, r16
     ffa:	81 93       	st	Z+, r24
     ffc:	8f 01       	movw	r16, r30
     ffe:	21 96       	adiw	r28, 0x01	; 1
}

/*Считывание и запись параметров таймера*/
inline void ReadTime(void)
{
	for (unsigned char i=0; i<3; i++)
    1000:	ee 15       	cp	r30, r14
    1002:	ff 05       	cpc	r31, r15
    1004:	b9 f7       	brne	.-18     	; 0xff4 <ENC_Dec+0x7c>
			
			if (DisplayN != 50)
			{
				ReadTime();
			}
			SendTask(DisplayUpdate);
    1006:	8b e8       	ldi	r24, 0x8B	; 139
    1008:	96 e0       	ldi	r25, 0x06	; 6
    100a:	16 dc       	rcall	.-2004   	; 0x838 <SendTask>
    100c:	48 c0       	rjmp	.+144    	; 0x109e <ENC_Dec+0x126>
		}
		else
		{
			unsigned char i = DisplayN%10 - 1;
		
			if (DisplayN < 50)
    100e:	c2 33       	cpi	r28, 0x32	; 50
    1010:	e8 f4       	brcc	.+58     	; 0x104c <ENC_Dec+0xd4>
			{
				i = 2-i;
    1012:	33 e0       	ldi	r19, 0x03	; 3
    1014:	39 1b       	sub	r19, r25
				Time[i]--;
    1016:	83 2f       	mov	r24, r19
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	fc 01       	movw	r30, r24
    101c:	ed 5a       	subi	r30, 0xAD	; 173
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	20 81       	ld	r18, Z
    1022:	21 50       	subi	r18, 0x01	; 1
    1024:	28 f0       	brcs	.+10     	; 0x1030 <ENC_Dec+0xb8>
    1026:	fc 01       	movw	r30, r24
    1028:	ed 5a       	subi	r30, 0xAD	; 173
    102a:	fe 4f       	sbci	r31, 0xFE	; 254
    102c:	20 83       	st	Z, r18
    102e:	2d c0       	rjmp	.+90     	; 0x108a <ENC_Dec+0x112>
				if (Time[i] == 255)
				{
					if (i != 0)
    1030:	33 23       	and	r19, r19
    1032:	31 f0       	breq	.+12     	; 0x1040 <ENC_Dec+0xc8>
						Time[i] = 59;
    1034:	fc 01       	movw	r30, r24
    1036:	ed 5a       	subi	r30, 0xAD	; 173
    1038:	fe 4f       	sbci	r31, 0xFE	; 254
    103a:	2b e3       	ldi	r18, 0x3B	; 59
    103c:	20 83       	st	Z, r18
    103e:	25 c0       	rjmp	.+74     	; 0x108a <ENC_Dec+0x112>
					else
						Time[i] = 99;
    1040:	fc 01       	movw	r30, r24
    1042:	ed 5a       	subi	r30, 0xAD	; 173
    1044:	fe 4f       	sbci	r31, 0xFE	; 254
    1046:	23 e6       	ldi	r18, 0x63	; 99
    1048:	20 83       	st	Z, r18
    104a:	1f c0       	rjmp	.+62     	; 0x108a <ENC_Dec+0x112>
			}
			SendTask(DisplayUpdate);
		}
		else
		{
			unsigned char i = DisplayN%10 - 1;
    104c:	81 50       	subi	r24, 0x01	; 1
						Time[i] = 99;
				}
			}
			else
			{
				switch (i)
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	51 f0       	breq	.+20     	; 0x1066 <ENC_Dec+0xee>
    1052:	18 f0       	brcs	.+6      	; 0x105a <ENC_Dec+0xe2>
    1054:	82 30       	cpi	r24, 0x02	; 2
    1056:	99 f0       	breq	.+38     	; 0x107e <ENC_Dec+0x106>
    1058:	18 c0       	rjmp	.+48     	; 0x108a <ENC_Dec+0x112>
				{
					case 0:
					{
						Settings[0]--;
    105a:	e0 e5       	ldi	r30, 0x50	; 80
    105c:	f1 e0       	ldi	r31, 0x01	; 1
    105e:	80 81       	ld	r24, Z
    1060:	81 50       	subi	r24, 0x01	; 1
    1062:	80 83       	st	Z, r24
						break;
    1064:	12 c0       	rjmp	.+36     	; 0x108a <ENC_Dec+0x112>
					}
					case 1:
					{
						Settings[1] -= 10;
    1066:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <Settings+0x1>
    106a:	8a 50       	subi	r24, 0x0A	; 10
						if (Settings[1] > 100)
    106c:	85 36       	cpi	r24, 0x65	; 101
    106e:	18 f4       	brcc	.+6      	; 0x1076 <ENC_Dec+0xfe>
						Settings[0]--;
						break;
					}
					case 1:
					{
						Settings[1] -= 10;
    1070:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <Settings+0x1>
    1074:	0a c0       	rjmp	.+20     	; 0x108a <ENC_Dec+0x112>
						if (Settings[1] > 100)
						Settings[1] = 100;
    1076:	84 e6       	ldi	r24, 0x64	; 100
    1078:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <Settings+0x1>
    107c:	06 c0       	rjmp	.+12     	; 0x108a <ENC_Dec+0x112>
					
						break;
					}
					case 2:
					{
						Settings[2] ^= (1<<0);
    107e:	e0 e5       	ldi	r30, 0x50	; 80
    1080:	f1 e0       	ldi	r31, 0x01	; 1
    1082:	92 81       	ldd	r25, Z+2	; 0x02
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	89 27       	eor	r24, r25
    1088:	82 83       	std	Z+2, r24	; 0x02
						break;
					}
				}
			}
			RSeg = 0;
    108a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <RSeg>
			UpdateTimerTask(MirrorDigit, 500);
    108e:	64 ef       	ldi	r22, 0xF4	; 244
    1090:	71 e0       	ldi	r23, 0x01	; 1
    1092:	88 ed       	ldi	r24, 0xD8	; 216
    1094:	96 e0       	ldi	r25, 0x06	; 6
    1096:	53 dc       	rcall	.-1882   	; 0x93e <UpdateTimerTask>
		
			SendTask(PrintParameters);
    1098:	83 e8       	ldi	r24, 0x83	; 131
    109a:	95 e0       	ldi	r25, 0x05	; 5
    109c:	cd db       	rcall	.-2150   	; 0x838 <SendTask>
		}
	}
}
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	08 95       	ret

000010ac <TimerStart>:


void TimerStart(void)
{
	
	if (TimerState == 0)
    10ac:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <TimerState>
    10b0:	81 11       	cpse	r24, r1
    10b2:	0a c0       	rjmp	.+20     	; 0x10c8 <TimerStart+0x1c>
	{
		TimerDelay = Settings[0];
    10b4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Settings>
    10b8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <TimerDelay>
		SendTimerTask(TimerStep, 1000);
    10bc:	68 ee       	ldi	r22, 0xE8	; 232
    10be:	73 e0       	ldi	r23, 0x03	; 3
    10c0:	8b e6       	ldi	r24, 0x6B	; 107
    10c2:	99 e0       	ldi	r25, 0x09	; 9
    10c4:	0a dc       	rcall	.-2028   	; 0x8da <SendTimerTask>
    10c6:	08 c0       	rjmp	.+16     	; 0x10d8 <TimerStart+0x2c>
	}
	else
	{
		if (TimerState == 2)
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	31 f4       	brne	.+12     	; 0x10d8 <TimerStart+0x2c>
			SendTimerTask(TimerStep, TimerTemp);
    10cc:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <TimerTemp>
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	8b e6       	ldi	r24, 0x6B	; 107
    10d4:	99 e0       	ldi	r25, 0x09	; 9
    10d6:	01 dc       	rcall	.-2046   	; 0x8da <SendTimerTask>
	}
	
	TimerState = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <TimerState>
	if (TimerDelay == 0)
    10de:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <TimerDelay>
    10e2:	81 11       	cpse	r24, r1
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <TimerStart+0x3c>
		TimerON();
    10e6:	c0 9a       	sbi	0x18, 0	; 24
    10e8:	08 95       	ret

000010ea <TimerPause>:
}

void TimerPause(void)
{
	if (TimerState == 1)
    10ea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <TimerState>
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	49 f4       	brne	.+18     	; 0x1104 <TimerPause+0x1a>
	{
		TimerOFF();
    10f2:	c0 98       	cbi	0x18, 0	; 24
		TimerTemp = RemoveTask(TimerStep);
    10f4:	8b e6       	ldi	r24, 0x6B	; 107
    10f6:	99 e0       	ldi	r25, 0x09	; 9
    10f8:	47 dc       	rcall	.-1906   	; 0x988 <RemoveTask>
    10fa:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <TimerTemp>
		TimerState = 2;
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <TimerState>
    1104:	08 95       	ret

00001106 <ENC_ShortPress>:
//***************************************************************************
// Короткое нажатие кнопки
//***************************************************************************
void ENC_ShortPress(void)
{
	if (DisplayN%10 == 0)
    1106:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <DisplayN>
    110a:	8d ec       	ldi	r24, 0xCD	; 205
    110c:	98 9f       	mul	r25, r24
    110e:	81 2d       	mov	r24, r1
    1110:	11 24       	eor	r1, r1
    1112:	86 95       	lsr	r24
    1114:	86 95       	lsr	r24
    1116:	86 95       	lsr	r24
    1118:	88 0f       	add	r24, r24
    111a:	28 2f       	mov	r18, r24
    111c:	22 0f       	add	r18, r18
    111e:	22 0f       	add	r18, r18
    1120:	82 0f       	add	r24, r18
    1122:	98 13       	cpse	r25, r24
    1124:	0a c0       	rjmp	.+20     	; 0x113a <ENC_ShortPress+0x34>
	{
		if (DisplayN < 50)
    1126:	92 33       	cpi	r25, 0x32	; 50
    1128:	00 f5       	brcc	.+64     	; 0x116a <ENC_ShortPress+0x64>
		{
			if (TimerState == 1)
    112a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <TimerState>
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	11 f4       	brne	.+4      	; 0x1136 <ENC_ShortPress+0x30>
				TimerPause();
    1132:	db df       	rcall	.-74     	; 0x10ea <TimerPause>
    1134:	08 95       	ret
			else
				TimerStart();
    1136:	ba df       	rcall	.-140    	; 0x10ac <TimerStart>
    1138:	08 95       	ret
		}
	}
	else
	{
		DisplayN++;
    113a:	31 e0       	ldi	r19, 0x01	; 1
    113c:	39 0f       	add	r19, r25
		if (DisplayN%10 == 4)
    113e:	8d ec       	ldi	r24, 0xCD	; 205
    1140:	38 9f       	mul	r19, r24
    1142:	81 2d       	mov	r24, r1
    1144:	11 24       	eor	r1, r1
    1146:	86 95       	lsr	r24
    1148:	86 95       	lsr	r24
    114a:	86 95       	lsr	r24
    114c:	88 0f       	add	r24, r24
    114e:	28 2f       	mov	r18, r24
    1150:	22 0f       	add	r18, r18
    1152:	22 0f       	add	r18, r18
    1154:	82 0f       	add	r24, r18
    1156:	23 2f       	mov	r18, r19
    1158:	28 1b       	sub	r18, r24
    115a:	24 30       	cpi	r18, 0x04	; 4
    115c:	19 f0       	breq	.+6      	; 0x1164 <ENC_ShortPress+0x5e>
				TimerStart();
		}
	}
	else
	{
		DisplayN++;
    115e:	30 93 47 01 	sts	0x0147, r19	; 0x800147 <DisplayN>
    1162:	08 95       	ret
		if (DisplayN%10 == 4)
		{
			DisplayN = DisplayN - 3;
    1164:	92 50       	subi	r25, 0x02	; 2
    1166:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <DisplayN>
    116a:	08 95       	ret

0000116c <TimerStop>:
		TimerState = 2;
	}
}

void TimerStop(void)
{
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
	TimerOFF();
    1178:	c0 98       	cbi	0x18, 0	; 24
	if (TimerState == 1)
    117a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <TimerState>
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	19 f4       	brne	.+6      	; 0x1188 <TimerStop+0x1c>
		RemoveTask(TimerStep);
    1182:	8b e6       	ldi	r24, 0x6B	; 107
    1184:	99 e0       	ldi	r25, 0x09	; 9
    1186:	00 dc       	rcall	.-2048   	; 0x988 <RemoveTask>
	TimerState = 0;	
    1188:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <TimerState>
/*Считывание и запись параметров таймера*/
inline void ReadTime(void)
{
	for (unsigned char i=0; i<3; i++)
	{
		Time[i] = eeprom_read_byte(&EE_TimeModes[DisplayN/10][i]);
    118c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <DisplayN>
    1190:	cd ec       	ldi	r28, 0xCD	; 205
    1192:	8c 9f       	mul	r24, r28
    1194:	c1 2d       	mov	r28, r1
    1196:	11 24       	eor	r1, r1
    1198:	c6 95       	lsr	r28
    119a:	c6 95       	lsr	r28
    119c:	c6 95       	lsr	r28
    119e:	d0 e0       	ldi	r29, 0x00	; 0
    11a0:	ce 01       	movw	r24, r28
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	c8 0f       	add	r28, r24
    11a8:	d9 1f       	adc	r29, r25
    11aa:	cd 5f       	subi	r28, 0xFD	; 253
    11ac:	df 4f       	sbci	r29, 0xFF	; 255
    11ae:	03 e5       	ldi	r16, 0x53	; 83
    11b0:	11 e0       	ldi	r17, 0x01	; 1
    11b2:	0f 2e       	mov	r0, r31
    11b4:	f6 e5       	ldi	r31, 0x56	; 86
    11b6:	ef 2e       	mov	r14, r31
    11b8:	f1 e0       	ldi	r31, 0x01	; 1
    11ba:	ff 2e       	mov	r15, r31
    11bc:	f0 2d       	mov	r31, r0
    11be:	ce 01       	movw	r24, r28
    11c0:	c6 d0       	rcall	.+396    	; 0x134e <eeprom_read_byte>
    11c2:	f8 01       	movw	r30, r16
    11c4:	81 93       	st	Z+, r24
    11c6:	8f 01       	movw	r16, r30
    11c8:	21 96       	adiw	r28, 0x01	; 1
}

/*Считывание и запись параметров таймера*/
inline void ReadTime(void)
{
	for (unsigned char i=0; i<3; i++)
    11ca:	ee 15       	cp	r30, r14
    11cc:	ff 05       	cpc	r31, r15
    11ce:	b9 f7       	brne	.-18     	; 0x11be <TimerStop+0x52>
	TimerOFF();
	if (TimerState == 1)
		RemoveTask(TimerStep);
	TimerState = 0;	
	ReadTime();
}
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	08 95       	ret

000011de <ENC_LongPress>:

//***************************************************************************
// Длинное нажатие кнопки
//***************************************************************************
void ENC_LongPress(void)
{
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
	if (TimerState == 0)
    11ea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <TimerState>
    11ee:	81 11       	cpse	r24, r1
    11f0:	67 c0       	rjmp	.+206    	; 0x12c0 <ENC_LongPress+0xe2>
	{
		if (DisplayN%10 == 0)
    11f2:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <DisplayN>
    11f6:	8d ec       	ldi	r24, 0xCD	; 205
    11f8:	98 9f       	mul	r25, r24
    11fa:	81 2d       	mov	r24, r1
    11fc:	11 24       	eor	r1, r1
    11fe:	86 95       	lsr	r24
    1200:	86 95       	lsr	r24
    1202:	86 95       	lsr	r24
    1204:	88 0f       	add	r24, r24
    1206:	28 2f       	mov	r18, r24
    1208:	22 0f       	add	r18, r18
    120a:	22 0f       	add	r18, r18
    120c:	82 0f       	add	r24, r18
    120e:	29 2f       	mov	r18, r25
    1210:	28 1b       	sub	r18, r24
    1212:	59 f4       	brne	.+22     	; 0x122a <ENC_LongPress+0x4c>
		{
			DisplayN++;
    1214:	9f 5f       	subi	r25, 0xFF	; 255
    1216:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <DisplayN>
			RSeg = 0;
    121a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <RSeg>
			SendTimerTask(MirrorDigit, 500);
    121e:	64 ef       	ldi	r22, 0xF4	; 244
    1220:	71 e0       	ldi	r23, 0x01	; 1
    1222:	88 ed       	ldi	r24, 0xD8	; 216
    1224:	96 e0       	ldi	r25, 0x06	; 6
    1226:	59 db       	rcall	.-2382   	; 0x8da <SendTimerTask>
    1228:	4f c0       	rjmp	.+158    	; 0x12c8 <ENC_LongPress+0xea>
		}
		else
		{
			DisplayN = DisplayN - DisplayN%10;
    122a:	92 1b       	sub	r25, r18
    122c:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <DisplayN>
			if (DisplayN < 50)
    1230:	92 33       	cpi	r25, 0x32	; 50
    1232:	10 f5       	brcc	.+68     	; 0x1278 <ENC_LongPress+0x9a>
    1234:	c3 e5       	ldi	r28, 0x53	; 83
    1236:	d1 e0       	ldi	r29, 0x01	; 1
    1238:	00 e0       	ldi	r16, 0x00	; 0
    123a:	10 e0       	ldi	r17, 0x00	; 0

inline void WriteTime(void)
{
	for (unsigned char i=0; i<3; i++)
	{
		eeprom_write_byte(&EE_TimeModes[DisplayN/10][i], Time[i]);
    123c:	0f 2e       	mov	r0, r31
    123e:	fd ec       	ldi	r31, 0xCD	; 205
    1240:	ff 2e       	mov	r15, r31
    1242:	f0 2d       	mov	r31, r0
    1244:	69 91       	ld	r22, Y+
    1246:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <DisplayN>
    124a:	8f 9d       	mul	r24, r15
    124c:	81 2d       	mov	r24, r1
    124e:	11 24       	eor	r1, r1
    1250:	86 95       	lsr	r24
    1252:	86 95       	lsr	r24
    1254:	86 95       	lsr	r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	9c 01       	movw	r18, r24
    125a:	22 0f       	add	r18, r18
    125c:	33 1f       	adc	r19, r19
    125e:	82 0f       	add	r24, r18
    1260:	93 1f       	adc	r25, r19
    1262:	80 0f       	add	r24, r16
    1264:	91 1f       	adc	r25, r17
    1266:	8d 5f       	subi	r24, 0xFD	; 253
    1268:	9f 4f       	sbci	r25, 0xFF	; 255
    126a:	79 d0       	rcall	.+242    	; 0x135e <eeprom_write_byte>
    126c:	0f 5f       	subi	r16, 0xFF	; 255
    126e:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

inline void WriteTime(void)
{
	for (unsigned char i=0; i<3; i++)
    1270:	03 30       	cpi	r16, 0x03	; 3
    1272:	11 05       	cpc	r17, r1
    1274:	39 f7       	brne	.-50     	; 0x1244 <ENC_LongPress+0x66>
    1276:	13 c0       	rjmp	.+38     	; 0x129e <ENC_LongPress+0xc0>
    1278:	00 e5       	ldi	r16, 0x50	; 80
    127a:	11 e0       	ldi	r17, 0x01	; 1
    127c:	c0 e0       	ldi	r28, 0x00	; 0
    127e:	d0 e0       	ldi	r29, 0x00	; 0
    1280:	0f 2e       	mov	r0, r31
    1282:	f3 e5       	ldi	r31, 0x53	; 83
    1284:	ef 2e       	mov	r14, r31
    1286:	f1 e0       	ldi	r31, 0x01	; 1
    1288:	ff 2e       	mov	r15, r31
    128a:	f0 2d       	mov	r31, r0

inline void WriteSettings(void)
{
	for (unsigned char i=0; i<3; i++)
	{
		eeprom_write_byte(&EE_TimerSettings[i], Settings[i]);
    128c:	f8 01       	movw	r30, r16
    128e:	61 91       	ld	r22, Z+
    1290:	8f 01       	movw	r16, r30
    1292:	ce 01       	movw	r24, r28
    1294:	64 d0       	rcall	.+200    	; 0x135e <eeprom_write_byte>
    1296:	21 96       	adiw	r28, 0x01	; 1
	}
}

inline void WriteSettings(void)
{
	for (unsigned char i=0; i<3; i++)
    1298:	0e 15       	cp	r16, r14
    129a:	1f 05       	cpc	r17, r15
    129c:	b9 f7       	brne	.-18     	; 0x128c <ENC_LongPress+0xae>
			DisplayN = DisplayN - DisplayN%10;
			if (DisplayN < 50)
				WriteTime();
			else
				WriteSettings();
			RSeg = 0;
    129e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <RSeg>
			RemoveTask(MirrorDigit);
    12a2:	88 ed       	ldi	r24, 0xD8	; 216
    12a4:	96 e0       	ldi	r25, 0x06	; 6
    12a6:	70 db       	rcall	.-2336   	; 0x988 <RemoveTask>
			HeaderPrints("Сохранено");
    12a8:	88 ed       	ldi	r24, 0xD8	; 216
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	59 d9       	rcall	.-3406   	; 0x560 <HeaderPrints>
			SendTimerTask(DisplayUpdate, 1000);
    12ae:	68 ee       	ldi	r22, 0xE8	; 232
    12b0:	73 e0       	ldi	r23, 0x03	; 3
    12b2:	8b e8       	ldi	r24, 0x8B	; 139
    12b4:	96 e0       	ldi	r25, 0x06	; 6
    12b6:	11 db       	rcall	.-2526   	; 0x8da <SendTimerTask>
			SendTask(PrintParameters);
    12b8:	83 e8       	ldi	r24, 0x83	; 131
    12ba:	95 e0       	ldi	r25, 0x05	; 5
    12bc:	bd da       	rcall	.-2694   	; 0x838 <SendTask>
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <ENC_LongPress+0xea>
		}
	}
	else
	{
		TimerStop();
    12c0:	55 df       	rcall	.-342    	; 0x116c <TimerStop>
		SendTask(PrintParameters);
    12c2:	83 e8       	ldi	r24, 0x83	; 131
    12c4:	95 e0       	ldi	r25, 0x05	; 5
    12c6:	b8 da       	rcall	.-2704   	; 0x838 <SendTask>
	}
}
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	08 95       	ret

000012d6 <TimerStep>:
	ReadTime();
}

void TimerStep(void)
{
	SendTimerTask(TimerStep, 1000);
    12d6:	68 ee       	ldi	r22, 0xE8	; 232
    12d8:	73 e0       	ldi	r23, 0x03	; 3
    12da:	8b e6       	ldi	r24, 0x6B	; 107
    12dc:	99 e0       	ldi	r25, 0x09	; 9
    12de:	fd da       	rcall	.-2566   	; 0x8da <SendTimerTask>
	SendTask(PrintParameters);
    12e0:	83 e8       	ldi	r24, 0x83	; 131
    12e2:	95 e0       	ldi	r25, 0x05	; 5
    12e4:	a9 da       	rcall	.-2734   	; 0x838 <SendTask>
	if(TimerDelay == 0)
    12e6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <TimerDelay>
    12ea:	81 11       	cpse	r24, r1
    12ec:	29 c0       	rjmp	.+82     	; 0x1340 <TimerStep+0x6a>
	{
		if (Time[2])
    12ee:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Time+0x2>
    12f2:	88 23       	and	r24, r24
    12f4:	79 f0       	breq	.+30     	; 0x1314 <TimerStep+0x3e>
		{
			Time[2]--;
    12f6:	81 50       	subi	r24, 0x01	; 1
    12f8:	e3 e5       	ldi	r30, 0x53	; 83
    12fa:	f1 e0       	ldi	r31, 0x01	; 1
    12fc:	82 83       	std	Z+2, r24	; 0x02
			if ((Time[0] == 0) && (Time[1] == 0) && (Time[2] == 0))
    12fe:	90 81       	ld	r25, Z
    1300:	91 11       	cpse	r25, r1
    1302:	24 c0       	rjmp	.+72     	; 0x134c <TimerStep+0x76>
    1304:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <Time+0x1>
    1308:	91 11       	cpse	r25, r1
    130a:	20 c0       	rjmp	.+64     	; 0x134c <TimerStep+0x76>
    130c:	81 11       	cpse	r24, r1
    130e:	1e c0       	rjmp	.+60     	; 0x134c <TimerStep+0x76>
				TimerStop();
    1310:	2d df       	rcall	.-422    	; 0x116c <TimerStop>
    1312:	08 95       	ret
		}
		else
		{
			Time[2] = 59;
    1314:	e3 e5       	ldi	r30, 0x53	; 83
    1316:	f1 e0       	ldi	r31, 0x01	; 1
    1318:	8b e3       	ldi	r24, 0x3B	; 59
    131a:	82 83       	std	Z+2, r24	; 0x02
			
			if (Time[1])
    131c:	81 81       	ldd	r24, Z+1	; 0x01
    131e:	88 23       	and	r24, r24
    1320:	21 f0       	breq	.+8      	; 0x132a <TimerStep+0x54>
				Time[1]--;
    1322:	81 50       	subi	r24, 0x01	; 1
    1324:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <Time+0x1>
    1328:	08 95       	ret
			else
			{
				Time[1] = 59;
    132a:	e3 e5       	ldi	r30, 0x53	; 83
    132c:	f1 e0       	ldi	r31, 0x01	; 1
    132e:	8b e3       	ldi	r24, 0x3B	; 59
    1330:	81 83       	std	Z+1, r24	; 0x01
				if (Time[0])
    1332:	80 81       	ld	r24, Z
    1334:	88 23       	and	r24, r24
    1336:	51 f0       	breq	.+20     	; 0x134c <TimerStep+0x76>
					Time[0]--;
    1338:	81 50       	subi	r24, 0x01	; 1
    133a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Time>
    133e:	08 95       	ret
			}
		}
	}
	else
	{
		TimerDelay--;
    1340:	81 50       	subi	r24, 0x01	; 1
    1342:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <TimerDelay>
		if (TimerDelay == 0)
    1346:	81 11       	cpse	r24, r1
    1348:	01 c0       	rjmp	.+2      	; 0x134c <TimerStep+0x76>
			TimerON();
    134a:	c0 9a       	sbi	0x18, 0	; 24
    134c:	08 95       	ret

0000134e <eeprom_read_byte>:
    134e:	e1 99       	sbic	0x1c, 1	; 28
    1350:	fe cf       	rjmp	.-4      	; 0x134e <eeprom_read_byte>
    1352:	9f bb       	out	0x1f, r25	; 31
    1354:	8e bb       	out	0x1e, r24	; 30
    1356:	e0 9a       	sbi	0x1c, 0	; 28
    1358:	99 27       	eor	r25, r25
    135a:	8d b3       	in	r24, 0x1d	; 29
    135c:	08 95       	ret

0000135e <eeprom_write_byte>:
    135e:	26 2f       	mov	r18, r22

00001360 <eeprom_write_r18>:
    1360:	e1 99       	sbic	0x1c, 1	; 28
    1362:	fe cf       	rjmp	.-4      	; 0x1360 <eeprom_write_r18>
    1364:	9f bb       	out	0x1f, r25	; 31
    1366:	8e bb       	out	0x1e, r24	; 30
    1368:	2d bb       	out	0x1d, r18	; 29
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	e2 9a       	sbi	0x1c, 2	; 28
    1370:	e1 9a       	sbi	0x1c, 1	; 28
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	08 95       	ret

00001378 <_exit>:
    1378:	f8 94       	cli

0000137a <__stop_program>:
    137a:	ff cf       	rjmp	.-2      	; 0x137a <__stop_program>
